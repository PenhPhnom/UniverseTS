{"version":3,"file":"Ticker.test.js","sourceRoot":"","sources":["../../test/Ticker.test.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,MAAM,EAAE,MAAM,8BAA8B,CAAC;AAGtD,MAAM,eAAe,GAAG,GAAG,CAAC;AAE5B,SAAS,IAAI,CAAC,EAAU,EAAE,IAAY,EAAE,UAAkB;IACtD,8CAA8C;AAClD,CAAC;AAED,SAAS,QAAQ,CAAC,EAAU,EAAE,IAAY,EAAE,UAAkB;IAC1D,kDAAkD;IAClD,2BAA2B;AAC/B,CAAC;AAED,SAAS,SAAS,CAAC,EAAU,EAAE,IAAY;IACvC,uCAAuC;AAC3C,CAAC;AAED,SAAS,aAAa,CAAC,EAAU,EAAE,IAAY;IAC3C,2CAA2C;IAC3C,gCAAgC;AACpC,CAAC;AAID,IAAI,CAAC,aAAa,EAAE,GAAG,EAAE;IAIrB,IAAI,MAAM,GAAG,IAAI,MAAM,CACnB,eAAe,EACf,CAAC,EAAU,EAAE,IAAY,EAAE,UAAkB,EAAE,EAAE,CAAC,IAAI,CAAC,EAAE,EAAE,IAAI,EAAE,UAAU,CAAC,EAC5E,CAAC,EAAU,EAAE,IAAY,EAAE,UAAkB,EAAE,EAAE,CAAC,QAAQ,CAAC,EAAE,EAAE,IAAI,EAAE,UAAU,CAAC,EAChF,CAAC,EAAU,EAAE,IAAY,EAAE,EAAE,CAAC,SAAS,CAAC,EAAE,EAAE,IAAI,CAAC,EACjD,CAAC,EAAU,EAAE,IAAY,EAAE,EAAE,CAAC,aAAa,CAAC,EAAE,EAAE,IAAI,CAAC,CACxD,CAAC;IAGF,OAAM,IAAI,EAAC,CAAC;QACR,IAAI,EAAE,GAAG,KAAK,CAAC;QACf,IAAI,WAAW,GAAG,CAAC,CAAC;QAEpB,wBAAwB;QACxB,EAAE,GAAG,EAAE,GAAG,WAAW,CAAC;QAEtB,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;QAEhB,OAAO;IACX,CAAC;AAEL,CAAC,CAAC,CAAC","sourcesContent":["import { Ticker } from \"../src/framework/core/Ticker\";\r\n\r\n\r\nconst kLogicDeltaTime = 0.1;\r\n\r\nfunction tick(dt: number, time: number, frameRatio: number) {\r\n    //this._rootSystem.tick(dt, time, frameRatio);\r\n}\r\n\r\nfunction postTick(dt: number, time: number, frameRatio: number) {\r\n    //this._rootSystem.postTick(dt, time, frameRatio);\r\n    //this._context.postTick();\r\n}\r\n\r\nfunction fixedTick(dt: number, time: number) {\r\n    //this._rootSystem.fixedTick(dt, time);\r\n}\r\n\r\nfunction postFixedTick(dt: number, time: number) {\r\n    //this._rootSystem.postFixedTick(dt, time);\r\n    //this._context.postFixedTick();\r\n}\r\n\r\n\r\n\r\ntest(\"Ticker test\", () =>{\r\n    \r\n\r\n\r\n    let ticker = new Ticker(\r\n        kLogicDeltaTime,\r\n        (dt: number, time: number, frameRatio: number) => tick(dt, time, frameRatio),\r\n        (dt: number, time: number, frameRatio: number) => postTick(dt, time, frameRatio),\r\n        (dt: number, time: number) => fixedTick(dt, time),\r\n        (dt: number, time: number) => postFixedTick(dt, time)\r\n    );\r\n    \r\n\r\n    while(true){\r\n        let dt = 0.001;\r\n        let battleSpeed = 1;\r\n        \r\n        //加速： Global.battleSpeed\r\n        dt = dt * battleSpeed;\r\n\r\n        ticker.tick(dt);\r\n\r\n        return;\r\n    }\r\n\r\n});"]}