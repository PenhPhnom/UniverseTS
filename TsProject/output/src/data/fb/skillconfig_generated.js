// automatically generated by the FlatBuffers compiler, do not modify
/**
 * @constructor
 */
export var fb;
(function (fb) {
    class skillconfigTB {
        constructor() {
            this.bb = null;
            this.bb_pos = 0;
        }
        /**
         * @param number i
         * @param flatbuffers.ByteBuffer bb
         * @returns skillconfigTB
         */
        __init(i, bb) {
            this.bb_pos = i;
            this.bb = bb;
            return this;
        }
        ;
        /**
         * @param flatbuffers.ByteBuffer bb
         * @param skillconfigTB= obj
         * @returns skillconfigTB
         */
        static getRootAsskillconfigTB(bb, obj) {
            return (obj || new skillconfigTB()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
        }
        ;
        /**
         * @param flatbuffers.ByteBuffer bb
         * @param skillconfigTB= obj
         * @returns skillconfigTB
         */
        static getSizePrefixedRootAsskillconfigTB(bb, obj) {
            bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
            return (obj || new skillconfigTB()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
        }
        ;
        /**
         * @param number index
         * @param fb.skillconfigTR= obj
         * @returns fb.skillconfigTR
         */
        skillconfigTRS(index, obj) {
            var offset = this.bb.__offset(this.bb_pos, 4);
            return offset ? (obj || new fb.skillconfigTR()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
        }
        ;
        /**
         * @returns number
         */
        skillconfigTRSLength() {
            var offset = this.bb.__offset(this.bb_pos, 4);
            return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
        }
        ;
        /**
         * @param flatbuffers.Builder builder
         */
        static startskillconfigTB(builder) {
            builder.startObject(1);
        }
        ;
        /**
         * @param flatbuffers.Builder builder
         * @param flatbuffers.Offset skillconfigTRSOffset
         */
        static addSkillconfigTRS(builder, skillconfigTRSOffset) {
            builder.addFieldOffset(0, skillconfigTRSOffset, 0);
        }
        ;
        /**
         * @param flatbuffers.Builder builder
         * @param Array.<flatbuffers.Offset> data
         * @returns flatbuffers.Offset
         */
        static createSkillconfigTRSVector(builder, data) {
            builder.startVector(4, data.length, 4);
            for (var i = data.length - 1; i >= 0; i--) {
                builder.addOffset(data[i]);
            }
            return builder.endVector();
        }
        ;
        /**
         * @param flatbuffers.Builder builder
         * @param number numElems
         */
        static startSkillconfigTRSVector(builder, numElems) {
            builder.startVector(4, numElems, 4);
        }
        ;
        /**
         * @param flatbuffers.Builder builder
         * @returns flatbuffers.Offset
         */
        static endskillconfigTB(builder) {
            var offset = builder.endObject();
            return offset;
        }
        ;
        /**
         * @param flatbuffers.Builder builder
         * @param flatbuffers.Offset offset
         */
        static finishskillconfigTBBuffer(builder, offset) {
            builder.finish(offset);
        }
        ;
        /**
         * @param flatbuffers.Builder builder
         * @param flatbuffers.Offset offset
         */
        static finishSizePrefixedskillconfigTBBuffer(builder, offset) {
            builder.finish(offset, undefined, true);
        }
        ;
        static createskillconfigTB(builder, skillconfigTRSOffset) {
            skillconfigTB.startskillconfigTB(builder);
            skillconfigTB.addSkillconfigTRS(builder, skillconfigTRSOffset);
            return skillconfigTB.endskillconfigTB(builder);
        }
    }
    fb.skillconfigTB = skillconfigTB;
})(fb || (fb = {}));
/**
 * @constructor
 */
(function (fb) {
    class skillconfigTR {
        constructor() {
            this.bb = null;
            this.bb_pos = 0;
        }
        /**
         * @param number i
         * @param flatbuffers.ByteBuffer bb
         * @returns skillconfigTR
         */
        __init(i, bb) {
            this.bb_pos = i;
            this.bb = bb;
            return this;
        }
        ;
        /**
         * @param flatbuffers.ByteBuffer bb
         * @param skillconfigTR= obj
         * @returns skillconfigTR
         */
        static getRootAsskillconfigTR(bb, obj) {
            return (obj || new skillconfigTR()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
        }
        ;
        /**
         * @param flatbuffers.ByteBuffer bb
         * @param skillconfigTR= obj
         * @returns skillconfigTR
         */
        static getSizePrefixedRootAsskillconfigTR(bb, obj) {
            bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
            return (obj || new skillconfigTR()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
        }
        ;
        /**
         * @returns number
         */
        Id() {
            var offset = this.bb.__offset(this.bb_pos, 4);
            return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
        }
        ;
        Name(optionalEncoding) {
            var offset = this.bb.__offset(this.bb_pos, 6);
            return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
        }
        ;
        Description(optionalEncoding) {
            var offset = this.bb.__offset(this.bb_pos, 8);
            return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
        }
        ;
        /**
         * @returns number
         */
        Cooltime() {
            var offset = this.bb.__offset(this.bb_pos, 10);
            return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
        }
        ;
        /**
         * @returns number
         */
        Costsp() {
            var offset = this.bb.__offset(this.bb_pos, 12);
            return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
        }
        ;
        /**
         * @returns number
         */
        Attackdistance() {
            var offset = this.bb.__offset(this.bb_pos, 14);
            return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
        }
        ;
        /**
         * @returns number
         */
        Attackangle() {
            var offset = this.bb.__offset(this.bb_pos, 16);
            return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
        }
        ;
        Attacktargettags(index, optionalEncoding) {
            var offset = this.bb.__offset(this.bb_pos, 18);
            return offset ? this.bb.__string(this.bb.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
        }
        ;
        /**
         * @returns number
         */
        AttacktargettagsLength() {
            var offset = this.bb.__offset(this.bb_pos, 18);
            return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
        }
        ;
        Impacttype(index, optionalEncoding) {
            var offset = this.bb.__offset(this.bb_pos, 20);
            return offset ? this.bb.__string(this.bb.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
        }
        ;
        /**
         * @returns number
         */
        ImpacttypeLength() {
            var offset = this.bb.__offset(this.bb_pos, 20);
            return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
        }
        ;
        /**
         * @returns number
         */
        Nextbattlerid() {
            var offset = this.bb.__offset(this.bb_pos, 22);
            return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
        }
        ;
        /**
         * @returns number
         */
        Atkratio() {
            var offset = this.bb.__offset(this.bb_pos, 24);
            return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
        }
        ;
        /**
         * @returns number
         */
        Durationtime() {
            var offset = this.bb.__offset(this.bb_pos, 26);
            return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
        }
        ;
        /**
         * @returns number
         */
        Atkinterval() {
            var offset = this.bb.__offset(this.bb_pos, 28);
            return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
        }
        ;
        Skillprefab(optionalEncoding) {
            var offset = this.bb.__offset(this.bb_pos, 30);
            return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
        }
        ;
        Animationname(optionalEncoding) {
            var offset = this.bb.__offset(this.bb_pos, 32);
            return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
        }
        ;
        Hitfxprefab(optionalEncoding) {
            var offset = this.bb.__offset(this.bb_pos, 34);
            return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
        }
        ;
        /**
         * @returns number
         */
        Level() {
            var offset = this.bb.__offset(this.bb_pos, 36);
            return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
        }
        ;
        /**
         * @returns number
         */
        Attacktype() {
            var offset = this.bb.__offset(this.bb_pos, 38);
            return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
        }
        ;
        /**
         * @returns number
         */
        Selectortype() {
            var offset = this.bb.__offset(this.bb_pos, 40);
            return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
        }
        ;
        /**
         * @param flatbuffers.Builder builder
         */
        static startskillconfigTR(builder) {
            builder.startObject(19);
        }
        ;
        /**
         * @param flatbuffers.Builder builder
         * @param number Id
         */
        static add_id(builder, Id) {
            builder.addFieldInt32(0, Id, 0);
        }
        ;
        /**
         * @param flatbuffers.Builder builder
         * @param flatbuffers.Offset NameOffset
         */
        static add_name(builder, NameOffset) {
            builder.addFieldOffset(1, NameOffset, 0);
        }
        ;
        /**
         * @param flatbuffers.Builder builder
         * @param flatbuffers.Offset DescriptionOffset
         */
        static add_description(builder, DescriptionOffset) {
            builder.addFieldOffset(2, DescriptionOffset, 0);
        }
        ;
        /**
         * @param flatbuffers.Builder builder
         * @param number Cooltime
         */
        static add_cooltime(builder, Cooltime) {
            builder.addFieldInt32(3, Cooltime, 0);
        }
        ;
        /**
         * @param flatbuffers.Builder builder
         * @param number Costsp
         */
        static add_costsp(builder, Costsp) {
            builder.addFieldInt32(4, Costsp, 0);
        }
        ;
        /**
         * @param flatbuffers.Builder builder
         * @param number Attackdistance
         */
        static add_attackdistance(builder, Attackdistance) {
            builder.addFieldFloat32(5, Attackdistance, 0.0);
        }
        ;
        /**
         * @param flatbuffers.Builder builder
         * @param number Attackangle
         */
        static add_attackangle(builder, Attackangle) {
            builder.addFieldFloat32(6, Attackangle, 0.0);
        }
        ;
        /**
         * @param flatbuffers.Builder builder
         * @param flatbuffers.Offset AttacktargettagsOffset
         */
        static add_attacktargettags(builder, AttacktargettagsOffset) {
            builder.addFieldOffset(7, AttacktargettagsOffset, 0);
        }
        ;
        /**
         * @param flatbuffers.Builder builder
         * @param Array.<flatbuffers.Offset> data
         * @returns flatbuffers.Offset
         */
        static create_attacktargettagsVector(builder, data) {
            builder.startVector(4, data.length, 4);
            for (var i = data.length - 1; i >= 0; i--) {
                builder.addOffset(data[i]);
            }
            return builder.endVector();
        }
        ;
        /**
         * @param flatbuffers.Builder builder
         * @param number numElems
         */
        static start_attacktargettagsVector(builder, numElems) {
            builder.startVector(4, numElems, 4);
        }
        ;
        /**
         * @param flatbuffers.Builder builder
         * @param flatbuffers.Offset ImpacttypeOffset
         */
        static add_impacttype(builder, ImpacttypeOffset) {
            builder.addFieldOffset(8, ImpacttypeOffset, 0);
        }
        ;
        /**
         * @param flatbuffers.Builder builder
         * @param Array.<flatbuffers.Offset> data
         * @returns flatbuffers.Offset
         */
        static create_impacttypeVector(builder, data) {
            builder.startVector(4, data.length, 4);
            for (var i = data.length - 1; i >= 0; i--) {
                builder.addOffset(data[i]);
            }
            return builder.endVector();
        }
        ;
        /**
         * @param flatbuffers.Builder builder
         * @param number numElems
         */
        static start_impacttypeVector(builder, numElems) {
            builder.startVector(4, numElems, 4);
        }
        ;
        /**
         * @param flatbuffers.Builder builder
         * @param number Nextbattlerid
         */
        static add_nextbattlerid(builder, Nextbattlerid) {
            builder.addFieldInt32(9, Nextbattlerid, 0);
        }
        ;
        /**
         * @param flatbuffers.Builder builder
         * @param number Atkratio
         */
        static add_atkratio(builder, Atkratio) {
            builder.addFieldFloat32(10, Atkratio, 0.0);
        }
        ;
        /**
         * @param flatbuffers.Builder builder
         * @param number Durationtime
         */
        static add_durationtime(builder, Durationtime) {
            builder.addFieldFloat32(11, Durationtime, 0.0);
        }
        ;
        /**
         * @param flatbuffers.Builder builder
         * @param number Atkinterval
         */
        static add_atkinterval(builder, Atkinterval) {
            builder.addFieldFloat32(12, Atkinterval, 0.0);
        }
        ;
        /**
         * @param flatbuffers.Builder builder
         * @param flatbuffers.Offset SkillprefabOffset
         */
        static add_skillprefab(builder, SkillprefabOffset) {
            builder.addFieldOffset(13, SkillprefabOffset, 0);
        }
        ;
        /**
         * @param flatbuffers.Builder builder
         * @param flatbuffers.Offset AnimationnameOffset
         */
        static add_animationname(builder, AnimationnameOffset) {
            builder.addFieldOffset(14, AnimationnameOffset, 0);
        }
        ;
        /**
         * @param flatbuffers.Builder builder
         * @param flatbuffers.Offset HitfxprefabOffset
         */
        static add_hitfxprefab(builder, HitfxprefabOffset) {
            builder.addFieldOffset(15, HitfxprefabOffset, 0);
        }
        ;
        /**
         * @param flatbuffers.Builder builder
         * @param number Level
         */
        static add_level(builder, Level) {
            builder.addFieldInt32(16, Level, 0);
        }
        ;
        /**
         * @param flatbuffers.Builder builder
         * @param number Attacktype
         */
        static add_attacktype(builder, Attacktype) {
            builder.addFieldInt32(17, Attacktype, 0);
        }
        ;
        /**
         * @param flatbuffers.Builder builder
         * @param number Selectortype
         */
        static add_selectortype(builder, Selectortype) {
            builder.addFieldInt32(18, Selectortype, 0);
        }
        ;
        /**
         * @param flatbuffers.Builder builder
         * @returns flatbuffers.Offset
         */
        static endskillconfigTR(builder) {
            var offset = builder.endObject();
            return offset;
        }
        ;
        static createskillconfigTR(builder, Id, NameOffset, DescriptionOffset, Cooltime, Costsp, Attackdistance, Attackangle, AttacktargettagsOffset, ImpacttypeOffset, Nextbattlerid, Atkratio, Durationtime, Atkinterval, SkillprefabOffset, AnimationnameOffset, HitfxprefabOffset, Level, Attacktype, Selectortype) {
            skillconfigTR.startskillconfigTR(builder);
            skillconfigTR.add_id(builder, Id);
            skillconfigTR.add_name(builder, NameOffset);
            skillconfigTR.add_description(builder, DescriptionOffset);
            skillconfigTR.add_cooltime(builder, Cooltime);
            skillconfigTR.add_costsp(builder, Costsp);
            skillconfigTR.add_attackdistance(builder, Attackdistance);
            skillconfigTR.add_attackangle(builder, Attackangle);
            skillconfigTR.add_attacktargettags(builder, AttacktargettagsOffset);
            skillconfigTR.add_impacttype(builder, ImpacttypeOffset);
            skillconfigTR.add_nextbattlerid(builder, Nextbattlerid);
            skillconfigTR.add_atkratio(builder, Atkratio);
            skillconfigTR.add_durationtime(builder, Durationtime);
            skillconfigTR.add_atkinterval(builder, Atkinterval);
            skillconfigTR.add_skillprefab(builder, SkillprefabOffset);
            skillconfigTR.add_animationname(builder, AnimationnameOffset);
            skillconfigTR.add_hitfxprefab(builder, HitfxprefabOffset);
            skillconfigTR.add_level(builder, Level);
            skillconfigTR.add_attacktype(builder, Attacktype);
            skillconfigTR.add_selectortype(builder, Selectortype);
            return skillconfigTR.endskillconfigTR(builder);
        }
    }
    fb.skillconfigTR = skillconfigTR;
})(fb || (fb = {}));
//# sourceMappingURL=skillconfig_generated.js.map