{"version":3,"file":"EntityGroup.js","sourceRoot":"","sources":["../../../../../src/framework/core/ECS/EntityGroup.ts"],"names":[],"mappings":"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","sourcesContent":["import { Entity } from \"./Entity\";\r\nimport { GroupID } from \"./GroupID\";\r\nimport { EntityContext } from \"./EntityContext\";\r\n\r\nfunction entityCmp(a: Entity, b: Entity): number {\r\n    if (!a) {\r\n        return 1;\r\n    }\r\n    if (!b) {\r\n        return -1;\r\n    }\r\n    return a.id - b.id;\r\n}\r\n\r\n\r\nlet _holdList: number[] = [];\r\nfunction fastRemoveUndefineInArray(arr: any[]): number {\r\n    _holdList.length = 0;\r\n\r\n    let count = arr.length;\r\n    for (let i = 0; i < count; i++) {\r\n        if (arr[i] === undefined) {\r\n            _holdList.push(i);\r\n        }\r\n    }\r\n\r\n    let holdListIndex = 0;\r\n    let newArrLength = count - _holdList.length;\r\n    for (let i = newArrLength; i < count; i++) {\r\n        let val = arr[i];\r\n        if (val === undefined) {\r\n            continue;\r\n        }\r\n\r\n        let holdIndex = _holdList[holdListIndex++];\r\n        arr[holdIndex] = val;\r\n    }\r\n\r\n    arr.length = newArrLength;\r\n    return _holdList.length;\r\n}\r\n\r\nfunction clearMap(map: any) {\r\n    for (let key in map) {\r\n        delete map[key];\r\n    }\r\n}\r\n\r\nexport class EntityGroup {\r\n    private _groupID: GroupID;\r\n    private _entities: Entity[] = [];\r\n    private _entityCount: number = 0;\r\n    private _entityIDToIndex: { [id: number]: number } = {};\r\n    private _addedEntities: Entity[] = [];\r\n    private _deletedEntities: Entity[] = [];\r\n    private _mute: boolean = false;\r\n    private _needSort: boolean = false;\r\n    private _entityCtx: EntityContext;\r\n\r\n    get mute(): boolean { return this._mute; }\r\n    get groupID(): GroupID { return this._groupID; }\r\n    get entityCount(): number { return this._entityCount; }\r\n    get addedEntities(): Entity[] { return this._addedEntities; }\r\n    get deletedEntities(): Entity[] { return this._deletedEntities; }\r\n\r\n    constructor(entityContext: EntityContext, groupID: GroupID) {\r\n        this._entityCtx = entityContext;\r\n        this._groupID = new GroupID().assign(groupID);\r\n    }\r\n\r\n    reset() {\r\n        this._entities.length = 0;\r\n        this._entityCount = 0;\r\n        clearMap(this._entityIDToIndex);\r\n        this._needSort = false;\r\n        this._addedEntities.length = 0;\r\n        this._deletedEntities.length = 0;\r\n    }\r\n\r\n    clear() {\r\n        this.reset();\r\n    }\r\n\r\n    forEach<T>(fn: (entity: Entity & T, data?: any) => void, thisArg?: any, data?: any) {\r\n        if (this._needSort) {\r\n            this.sortEntities();\r\n        }\r\n\r\n        let entities = this._entities;\r\n        for (let i = 0; i < entities.length; i++) {\r\n            let entity = entities[i];\r\n            if (entity === undefined) {\r\n                continue;\r\n            }\r\n            fn.call(thisArg, entity, data);\r\n        }\r\n    }\r\n\r\n    asArrayHasHole<T>(): (Entity & T)[] {\r\n        if (this._needSort) {\r\n            this.sortEntities();\r\n        }\r\n\r\n        return <(Entity & T)[]>this._entities;\r\n    }\r\n\r\n    added<T>(): (Entity & T)[] {\r\n        return <(Entity & T)[]>this.addedEntities;\r\n    }\r\n\r\n    deleted<T>(): (Entity & T)[] {\r\n        return <(Entity & T)[]>this._deletedEntities;\r\n    }\r\n\r\n    add(entity: Entity) {\r\n        let length = this._entities.push(entity);\r\n        this._entityIDToIndex[entity.id] = length - 1;\r\n        this._addedEntities.push(entity);\r\n        this._entityCount++;\r\n\r\n        if (this._needSort) {\r\n            return;\r\n        }\r\n\r\n        this._needSort = this.getLastEntityID() > entity.id;\r\n    }\r\n\r\n    del(entity: Entity) {\r\n        this._entityCount--;\r\n        let entityID = entity.id;\r\n        let entities = this._entities;\r\n        let idToIndex = this._entityIDToIndex;\r\n\r\n        let index = idToIndex[entityID];\r\n        delete entities[index];\r\n        delete idToIndex[entityID];\r\n\r\n        this._deletedEntities.push(entity);\r\n    }\r\n\r\n    delAll() {\r\n        let entities = this._entities;\r\n        if (entities.length <= 0) {\r\n            return;\r\n        }\r\n\r\n        this._mute = true;\r\n        for (let entity of entities) {\r\n            entity.recover();\r\n            this._deletedEntities.push(entity);\r\n        }\r\n\r\n        this._entities.length = 0;\r\n        clearMap(this._entityIDToIndex);\r\n        this._needSort = false;\r\n        this._addedEntities.length = 0;\r\n        this._entityCount = 0;\r\n\r\n        this._mute = false;\r\n    }\r\n\r\n    resetEvents() {\r\n        this._addedEntities.length = 0;\r\n        this._deletedEntities.length = 0;\r\n        if (fastRemoveUndefineInArray(this._entities)) {\r\n            this.sortEntities();\r\n        }\r\n    }\r\n\r\n    private sortEntities() {\r\n        let entities = this._entities.sort(entityCmp);\r\n        let idToIndex = this._entityIDToIndex;\r\n        clearMap(idToIndex);\r\n\r\n        let count = entities.length;\r\n        for (let k = 0; k < count; k++) {\r\n            let entity = entities[k];\r\n            if (entity) {\r\n                idToIndex[entity.id] = k;\r\n            }\r\n        }\r\n\r\n        this._needSort = false;\r\n    }\r\n\r\n    private getLastEntityID(): number {\r\n        let entities = this._entities;\r\n        let count = entities.length;\r\n        for (let i = count - 1; i >= 0; i--) {\r\n            let entity = entities[i];\r\n            if (entity) {\r\n                return entity.id;\r\n            }\r\n        }\r\n        return 0;\r\n    }\r\n}\r\n\r\nexport class EntityCombineGroup {\r\n    private _groups: EntityGroup[] = [];\r\n\r\n    constructor(groups: EntityGroup[]) {\r\n        this._groups = groups;\r\n    }\r\n\r\n    get groups() { return this._groups; }\r\n\r\n    hasEntity(): boolean {\r\n        for (let group of this._groups) {\r\n            if (group.entityCount > 0) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n}\r\n\r\nexport class EntityGroupIter<T> {\r\n    private _group: EntityGroup;\r\n\r\n    init(group: EntityGroup) {\r\n        this._group = group;\r\n    }\r\n\r\n    get group() { return this._group; }\r\n    get count() { return this._group.entityCount; }\r\n\r\n    forEach(fn: (entity: Entity & T, data?: any) => void, thisArg?: any, data?: any) {\r\n        this._group.forEach(fn, thisArg, data);\r\n    }\r\n\r\n    asArrayHasHole() {\r\n        return this._group.asArrayHasHole<T>();\r\n    }\r\n\r\n    added() {\r\n        return <(Entity & T)[]>this._group.addedEntities;\r\n    }\r\n\r\n    deleted() {\r\n        return <(Entity & T)[]>this._group.deletedEntities;\r\n    }\r\n}"]}