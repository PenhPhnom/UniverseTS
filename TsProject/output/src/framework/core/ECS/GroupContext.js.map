{"version":3,"file":"GroupContext.js","sourceRoot":"","sources":["../../../../../src/framework/core/ECS/GroupContext.ts"],"names":[],"mappings":"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","sourcesContent":["import { EntityGroup, EntityCombineGroup } from \"./EntityGroup\";\r\nimport { EntityContext } from \"./EntityContext\";\r\nimport { Entity } from \"./Entity\";\r\nimport { GroupID } from \"./GroupID\";\r\nimport { theFramePool } from \"../FramePool\";\r\n\r\nclass MatchGroups {\r\n    groupID: GroupID;\r\n    groups: EntityGroup[] = [];\r\n\r\n    constructor(groupID: GroupID){\r\n        this.groupID = new GroupID();\r\n        this.groupID.assign(groupID);\r\n    }\r\n}\r\n\r\nclass GroupContext {\r\n    protected _entityCtx: EntityContext;\r\n    protected _groupIDToGroup: { [id: string]: EntityGroup } = {};\r\n    protected _groupIDToMatchGroups: { [id: string]: MatchGroups } = {};\r\n    protected _groupPropName: string;\r\n    protected _customIDToCombineGroup: { [id: string]: EntityCombineGroup } = {};\r\n\r\n    get entityContext() { return this._entityCtx; }\r\n    get groupIDToGoup() { return this._groupIDToGroup; }\r\n\r\n    constructor(entityCtx: EntityContext, groupPropName: string) {\r\n        this._entityCtx = entityCtx;\r\n        this._groupPropName = groupPropName;\r\n    }\r\n\r\n    reset() {\r\n        let groupMap = this._groupIDToGroup;\r\n        for (let id in groupMap) {\r\n            let group = groupMap[id];\r\n            group.reset();\r\n        }\r\n    }\r\n\r\n    clear() {\r\n        let groupMap = this._groupIDToGroup;\r\n        for (let id in groupMap) {\r\n            let group = groupMap[id];\r\n            group.clear();\r\n        }\r\n    }\r\n\r\n    getByGroupID(groupID: GroupID): EntityGroup {\r\n        return this._groupIDToGroup[groupID.key];\r\n    }\r\n\r\n    getOrCreateGroupByID(groupID: GroupID): EntityGroup {\r\n        let group = this._groupIDToGroup[groupID.key];\r\n        if (group) {\r\n            return group;\r\n        }\r\n\r\n        group = new EntityGroup(this.entityContext, groupID);\r\n        this._groupIDToGroup[groupID.key] = group;\r\n\r\n        let entityMap = this._entityCtx.entityMap;\r\n        let propName = this._groupPropName;\r\n        for (let key in entityMap) {\r\n            let entity = entityMap[key];\r\n            if (entity[propName].hasMask(groupID)) {\r\n                group.add(entity);\r\n            }\r\n        }\r\n\r\n        // matchGroupID我们缓存起来了, 所以这里也还需要重新计算一下.\r\n        let matchGroupMap = this._groupIDToMatchGroups;\r\n        for (let matchGroupIDKey in matchGroupMap) {\r\n            let matchGroups = matchGroupMap[matchGroupIDKey];\r\n            if (matchGroups.groupID.hasMask(groupID)) {\r\n                matchGroups.groups.push(group);\r\n            }\r\n        }\r\n\r\n        return group;\r\n    }\r\n\r\n    createOrGroups(customID: number, groupIDs: GroupID[]): EntityCombineGroup {\r\n        let result = this._customIDToCombineGroup[customID];\r\n        if (result) {\r\n            return result;\r\n        }\r\n\r\n        let self = this;\r\n        let groups = groupIDs.map((groupID: GroupID) => self.getOrCreateGroupByID(groupID));\r\n        result = this._customIDToCombineGroup[customID] = new EntityCombineGroup(groups);\r\n        return result;\r\n    }\r\n\r\n    changeEntityGroup(entity: Entity, prevGroupID: GroupID, curGroupID: GroupID) {\r\n        let keepGroupMask = theFramePool.allocItem(\"GroupID\", GroupID);\r\n        curGroupID.intersection(keepGroupMask, prevGroupID);\r\n\r\n        let addGroups = this.getOrCreateMatchGroups(curGroupID);\r\n        for (let group of addGroups.groups) {\r\n            if (keepGroupMask.hasMask(group.groupID)) {\r\n                continue;\r\n            }\r\n            group.add(entity);\r\n        }\r\n\r\n        let delGroups = this.getOrCreateMatchGroups(prevGroupID);\r\n        for (let group of delGroups.groups) {\r\n            if (group.mute) {\r\n                continue;\r\n            }\r\n            if (keepGroupMask.hasMask(group.groupID)) {\r\n                continue;\r\n            }\r\n            group.del(entity);\r\n        }\r\n    }\r\n\r\n    resetEvents() {\r\n        let groupIDToGroup = this._groupIDToGroup;\r\n        for (let key in groupIDToGroup) {\r\n            let group = groupIDToGroup[key];\r\n            group.resetEvents();\r\n        }\r\n    }\r\n\r\n    private getOrCreateMatchGroups(groupID: GroupID): MatchGroups {\r\n        let matchGroups = this._groupIDToMatchGroups[groupID.key];\r\n        if (matchGroups) {\r\n            return matchGroups;\r\n        }\r\n\r\n        this._groupIDToMatchGroups[groupID.key] = matchGroups = new MatchGroups(groupID);\r\n        let groupIDToGroup = this._groupIDToGroup;\r\n        for (let checkGroupKey in groupIDToGroup) {\r\n            let checkGroup = groupIDToGroup[checkGroupKey];\r\n            let checkGroupID = checkGroup.groupID;\r\n            if (groupID.hasMask(checkGroupID)) {\r\n                matchGroups.groups.push(checkGroup);\r\n            }\r\n        }\r\n\r\n        return matchGroups;\r\n    }\r\n}\r\n\r\nexport class ComponentGroupContext extends GroupContext {\r\n    constructor(entityCtx: EntityContext) {\r\n        super(entityCtx, \"groupID\");\r\n    }\r\n\r\n    create(...classes: any[]): EntityGroup {\r\n        let groupID = theFramePool.allocItem(\"GroupID\", GroupID);\r\n        groupID.reset();\r\n\r\n        let ctx = this._entityCtx;\r\n        for (let cls of classes) {\r\n            if (cls) {\r\n                groupID.set(ctx.getOrRegClassID(cls));\r\n            }\r\n        }\r\n        return this.getOrCreateGroupByID(groupID);\r\n    }\r\n}\r\n"]}