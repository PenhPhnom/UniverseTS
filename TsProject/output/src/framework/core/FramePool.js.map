{"version":3,"file":"FramePool.js","sourceRoot":"","sources":["../../../../src/framework/core/FramePool.ts"],"names":[],"mappings":"AAKA,MAAM,OAAO,SAAS;IAAtB;QACY,sBAAiB,GAAY,EAAE,CAAC;QAChC,sBAAiB,GAAY,EAAE,CAAC;IAqC5C,CAAC;IAnCG,yCAAyC;IACzC,SAAS,CAAI,IAAY,EAAE,GAAmB;QAC1C,IAAI,aAAa,GAAG,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,iBAAiB,EAAE,IAAI,CAAC,CAAC;QACvE,IAAI,IAAI,GAAG,aAAa,CAAC,MAAM,CAAC,CAAC,CAAC,aAAa,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,IAAI,GAAG,EAAE,CAAC;QAClE,IAAI,aAAa,GAAG,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,iBAAiB,EAAE,IAAI,CAAC,CAAC;QACvE,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACzB,OAAO,IAAI,CAAC;IAChB,CAAC;IAED,qBAAqB,CAAC,IAAY;QAC9B,OAAO,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;IAClF,CAAC;IAED,qBAAqB,CAAC,IAAY;QAC9B,OAAO,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;IAClF,CAAC;IAED,UAAU;QACN,IAAI,YAAY,GAAG,IAAI,CAAC,iBAAiB,CAAC;QAC1C,IAAI,YAAY,GAAG,IAAI,CAAC,iBAAiB,CAAC;QAE1C,KAAK,IAAI,GAAG,IAAI,YAAY,EAAE,CAAC;YAC3B,IAAI,cAAc,GAAG,YAAY,CAAC,GAAG,CAAC,CAAC;YACvC,IAAI,cAAc,GAAG,YAAY,CAAC,GAAG,CAAC,IAAI,EAAE,CAAC;YAE7C,cAAc,CAAC,IAAI,CAAC,GAAG,cAAc,CAAC,CAAC;YACvC,cAAc,CAAC,MAAM,GAAG,CAAC,CAAC;YAE1B,IAAI,CAAC,iBAAiB,CAAC,GAAG,CAAC,GAAG,cAAc,CAAC;QACjD,CAAC;IACL,CAAC;IAEO,eAAe,CAAC,OAAgB,EAAE,IAAY;QAClD,OAAO,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,CAAC;IACjD,CAAC;CACJ;AAED,MAAM,CAAC,IAAI,YAAY,GAAG,IAAI,SAAS,EAAE,CAAC","sourcesContent":["// 一次回收所有对象的对象池, 一般用于生命期只有固定帧数的对象上.\r\nimport { Constructor } from \"./types\";\r\n\r\ntype PoolMap = { [key: string]: [] };\r\n\r\nexport class FramePool {\r\n    private _allocatedPoolMap: PoolMap = {};\r\n    private _recoveredPoolMap: PoolMap = {};\r\n\r\n    // TODO: 如果我们Patch的话, 应该可以去掉这个stringSign.\r\n    allocItem<T>(sign: string, cls: Constructor<T>): T {\r\n        let recoveredPool = this.getOrCreatePool(this._recoveredPoolMap, sign);\r\n        let item = recoveredPool.length ? recoveredPool.pop() : new cls();\r\n        let allocatedPool = this.getOrCreatePool(this._allocatedPoolMap, sign);\r\n        allocatedPool.push(item);\r\n        return item;\r\n    }\r\n\r\n    getAllocatedItemCount(sign: string): number {\r\n        return this._allocatedPoolMap[sign] ? this._allocatedPoolMap[sign].length : 0; \r\n    }\r\n\r\n    getRecoveredItemCount(sign: string): number {\r\n        return this._recoveredPoolMap[sign] ? this._recoveredPoolMap[sign].length : 0; \r\n    }\r\n\r\n    recoverAll() {\r\n        let allocatedMap = this._allocatedPoolMap;\r\n        let recoveredMap = this._recoveredPoolMap;\r\n\r\n        for (let key in allocatedMap) {\r\n            let allocatedArray = allocatedMap[key];\r\n            let recoveredArray = recoveredMap[key] || [];\r\n\r\n            recoveredArray.push(...allocatedArray);\r\n            allocatedArray.length = 0;\r\n\r\n            this._recoveredPoolMap[key] = recoveredArray;\r\n        }\r\n    }\r\n\r\n    private getOrCreatePool(poolMap: PoolMap, sign: string): Array<any> {\r\n        return poolMap[sign] || (poolMap[sign] = []);\r\n    }\r\n}\r\n\r\nexport let theFramePool = new FramePool();"]}