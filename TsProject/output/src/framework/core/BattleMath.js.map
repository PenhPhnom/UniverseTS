{"version":3,"file":"BattleMath.js","sourceRoot":"","sources":["../../../../src/framework/core/BattleMath.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,IAAI,EAAE,MAAM,QAAQ,CAAC;AAE9B,MAAM,QAAQ,GAAG,CAAC,CAAC;AAEnB,MAAM,OAAO,UAAU;IAInB,MAAM,CAAC,QAAQ,CAAC,CAAS,EAAE,CAAS;QAChC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;IACzB,CAAC;IAED,MAAM,CAAC,UAAU,CAAC,EAAU,EAAE,EAAU,EAAE,EAAU,EAAE,EAAU;QAC5D,IAAI,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC;QACjB,IAAI,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC;QACjB,OAAO,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC;IAC7B,CAAC;IAED,MAAM,CAAC,OAAO,CAAC,GAAW,EAAE,GAAW;QACnC,OAAO,CAAC,CAAC,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,CAAC,GAAG,GAAG,CAAC;IACrC,CAAC;IAED,MAAM,CAAC,IAAI,CAAC,GAAW;QACnB,OAAO,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC;IACjC,CAAC;IAED,MAAM,CAAC,uBAAuB,CAAC,GAAW,EAAE,GAAW;QACnD,IAAI,MAAM,GAAG,GAAG,GAAG,GAAG,CAAC;QACvB,IAAI,SAAS,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;QACjC,OAAO,CAAC,SAAS,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IACtE,CAAC;IAED,MAAM,CAAC,gBAAgB,CAAC,GAAW,EAAE,GAAW,EAAE,IAAY;QAC1D,IAAI,IAAI,GAAG,CAAC,EAAE,CAAC;YACX,OAAO,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;QAC9B,CAAC;QACD,OAAO,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;IAC9B,CAAC;IAED,MAAM,CAAC,eAAe,CAAC,OAAa,EAAE,OAAe,EAAE,OAAa,EAAE,OAAe;QACjF,IAAI,MAAM,GAAG,IAAI,CAAC,UAAU,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC,KAAK,EAAE,CAAC;QACvD,IAAI,MAAM,GAAG,OAAO,GAAG,OAAO,CAAC;QAC/B,IAAI,QAAQ,GAAG,CAAC,MAAM,GAAG,MAAM,CAAC,CAAC,KAAK,EAAE,CAAC;QACzC,OAAO,MAAM,GAAG,QAAQ,CAAC;IAC7B,CAAC;IAED,MAAM,CAAC,KAAK,CAAC,CAAS;QAClB,OAAO,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC;IAClC,CAAC;IAED,MAAM,CAAC,SAAS,CAAC,CAAO;QACpB,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC;QAC/B,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC;QAC/B,OAAO,CAAC,CAAC;IACb,CAAC;IAED,MAAM,CAAC,aAAa,CAAC,CAAS,EAAE,CAAS;QACrC,IAAI,KAAK,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,UAAU,CAAC,SAAS,CAAC,CAAC,KAAK,EAAE,CAAC;QAC9D,OAAO,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;IAC9B,CAAC;;AAtDe,oBAAS,GAAG,CAAC,IAAI,CAAC,EAAE,GAAG,KAAK,CAAC,CAAC,KAAK,EAAE,CAAC;AACtC,oBAAS,GAAG,CAAC,KAAK,GAAG,IAAI,CAAC,EAAE,CAAC,CAAC,KAAK,EAAE,CAAC","sourcesContent":["import { Vec2 } from \"./Vec2\";\r\n\r\nconst kPrecise = 7;\r\n\r\nexport class BattleMath {\r\n    static readonly kDegToRad = (Math.PI / 180.0).fixed();\r\n    static readonly kRadToDeg = (180.0 / Math.PI).fixed();\r\n\r\n    static lengthSQ(x: number, y: number): number {\r\n        return x * x + y * y;\r\n    }\r\n\r\n    static distanceSQ(x0: number, y0: number, x1: number, y1: number): number {\r\n        let dx = x0 - x1;\r\n        let dy = y0 - y1;\r\n        return dx * dx + dy * dy;\r\n    }\r\n\r\n    static trueMod(val: number, max: number): number {\r\n        return ((val % max) + max) % max;\r\n    }\r\n\r\n    static sign(val: number): number {\r\n        return val >= 0 ? 1.0 : -1.0;\r\n    }\r\n\r\n    static getShortestRotationSign(src: number, dst: number): number {\r\n        let dAngle = dst - src;\r\n        let absDAngle = Math.abs(dAngle);\r\n        return (absDAngle < 180) ? this.sign(dAngle) : -this.sign(dAngle);\r\n    }\r\n\r\n    static clampValueBySign(val: number, dst: number, sign: number): number {\r\n        if (sign > 0) {\r\n            return Math.min(val, dst);\r\n        }\r\n        return Math.max(val, dst);\r\n    }\r\n\r\n    static circleCollision(center0: Vec2, radius0: number, center1: Vec2, radius1: number): boolean {\r\n        let distSQ = Vec2.distanceSQ(center0, center1).fixed();\r\n        let radius = radius0 + radius1;\r\n        let radiusSQ = (radius * radius).fixed();\r\n        return distSQ < radiusSQ;\r\n    }\r\n\r\n    static fixed(n: number): number {\r\n        return +(n.toFixed(kPrecise));\r\n    }\r\n\r\n    static fixedVec2(v: Vec2): Vec2 {\r\n        v.x = +(v.x.toFixed(kPrecise));\r\n        v.y = +(v.y.toFixed(kPrecise));\r\n        return v;\r\n    }\r\n\r\n    static dirToRotation(x: number, y: number): number {\r\n        let angle = (Math.atan2(y, x) * BattleMath.kRadToDeg).fixed();\r\n        return angle.trueMod(360);\r\n    }\r\n}"]}