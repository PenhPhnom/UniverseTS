{"version":3,"file":"Utils.js","sourceRoot":"","sources":["../../../../src/framework/core/Utils.ts"],"names":[],"mappings":"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","sourcesContent":["import { UnityEngine } from \"csharp\";\r\n\r\nexport default class Utils {\r\n    static pingPong(value: number, max: number): number {\r\n        return Math.abs(Utils.trueMod(value - max, 2 * max) - max);\r\n    }\r\n\r\n    static fail(msg: string): never {\r\n        throw new Error(msg);\r\n    }\r\n\r\n    static clamp(val: number, min: number, max: number): number {\r\n        if (val < min) {\r\n            return min;\r\n        }\r\n        if (val > max) {\r\n            return max;\r\n        }\r\n        return val;\r\n    }\r\n\r\n    static remap(val: number, valMin: number, valMax: number, mapMin: number, mapMax: number): number {\r\n        let ratio = (val - valMin) / (valMax - valMin);\r\n        return mapMin + ratio * (mapMax - mapMin);\r\n    }\r\n\r\n    static matchInt(ratio: number, intMin: number, intMax: number): number {\r\n        let middleRatio = ratio + 0.5 / intMax;\r\n        middleRatio %= 1.0;\r\n        return intMin + Math.floor(middleRatio * intMax);\r\n    }\r\n\r\n    static remapToInt(val: number, valMin: number, valMax: number, mapMin: number, mapMax: number): number {\r\n        let ratio = (val - valMin) / (valMax - valMin);\r\n        return Utils.matchInt(ratio, mapMin, mapMax);\r\n    }\r\n\r\n    static trueMod(val: number, max: number): number {\r\n        return ((val % max) + max) % max;\r\n    }\r\n\r\n    static wrapRemapToInt(val: number, valMin: number, valMax: number, mapMin: number, mapMax: number): number {\r\n        val = valMin + Utils.trueMod(val - valMin, valMax - valMin);\r\n        return this.remapToInt(val, valMin, valMax, mapMin, mapMax);\r\n    }\r\n\r\n    static findInMap(map: any, compare: (key: string, val: any) => boolean): any {\r\n        for (let key in map) {\r\n            let value = map[key];\r\n            if (compare(key, value)) {\r\n                return value;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    static rotatePoint(rpoint:UnityEngine.Vector2,angle,x,y)\r\n    {\r\n        let ret=new UnityEngine.Vector2();\r\n        let rad=angle*Math.PI/180;\r\n        ret.x=(x-rpoint.x)*Math.cos(rad)-(y-rpoint.y)*Math.sin(rad)+rpoint.x;\r\n        ret.y=(x-rpoint.x)*Math.sin(rad)+(y-rpoint.y)*Math.cos(rad)+rpoint.y;\r\n        return ret;\r\n    }\r\n\r\n    \r\n}"]}