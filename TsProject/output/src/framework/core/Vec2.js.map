{"version":3,"file":"Vec2.js","sourceRoot":"","sources":["../../../../src/framework/core/Vec2.ts"],"names":[],"mappings":"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","sourcesContent":["import { BattleMath } from \"./BattleMath\";\r\n\r\nexport class Vec2 {\r\n    static readonly kZero = new Vec2(0, 0);\r\n    static readonly kAxisX = new Vec2(1, 0);\r\n    static readonly kAxisY = new Vec2(0, 1);\r\n    static readonly kOne = new Vec2(1, 1);\r\n\r\n    x: number;\r\n    y: number;\r\n\r\n    get width() { return this.x; }\r\n    set width(w: number) { this.x = w; }\r\n    get height() { return this.y; }\r\n    set height(h: number) { this.y = h; }\r\n\r\n    constructor(x?: number, y?: number) {\r\n        this.x = x || 0;\r\n        this.y = y || 0;\r\n    }\r\n\r\n    set(x: number, y: number) {\r\n        this.x = x;\r\n        this.y = y;\r\n        return this;\r\n    }\r\n\r\n    setVec2(v: Vec2) {\r\n        this.x = v.x;\r\n        this.y = v.y;\r\n        return this;\r\n    }\r\n\r\n    setScalar(s: number) {\r\n        this.x = s;\r\n        this.y = s;\r\n        return this;\r\n    }\r\n\r\n    setX(x: number) {\r\n        this.x = x;\r\n        return this;\r\n    }\r\n\r\n    setY(y: number) {\r\n        this.y = y;\r\n        return this;\r\n    }\r\n\r\n    equal(v: Vec2): boolean {\r\n        return this.x == v.x && this.y == v.y;\r\n    }\r\n\r\n    fixed() {\r\n        this.x = this.x.fixed();\r\n        this.y = this.y.fixed();\r\n        return this;\r\n    }\r\n\r\n    setLength(len: number) {\r\n        return Vec2.mulScalar(this, Vec2.normalize(this, this), len);\r\n    }\r\n\r\n    clone(): Vec2 {\r\n        return new Vec2(this.x, this.y);\r\n    }\r\n\r\n    lengthSQ(): number {\r\n        return this.x * this.x + this.y * this.y;\r\n    }\r\n\r\n    length() {\r\n        return Math.sqrt(this.x * this.x + this.y * this.y);\r\n    }\r\n\r\n    clampLength(maxLen: number) {\r\n        let lenSQ = this.lengthSQ().fixed();\r\n        let maxLenSQ = (maxLen * maxLen).fixed();\r\n        if (lenSQ > maxLenSQ) {\r\n            this.setLength(maxLen);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    static add(out: Vec2, a: Vec2, b: Vec2): Vec2 {\r\n        out.x = a.x + b.x;\r\n        out.y = a.y + b.y;\r\n        return out;\r\n    }\r\n\r\n    static addScalar(out: Vec2, a: Vec2, s: number): Vec2 {\r\n        out.x = a.x + s;\r\n        out.y = a.y + s;\r\n        return out;\r\n    }\r\n\r\n    static addScaledVec(out: Vec2, a: Vec2, b: Vec2, s: number): Vec2 {\r\n        out.x = a.x + b.x * s;\r\n        out.y = a.y + b.y * s;\r\n        return out;\r\n    }\r\n\r\n    static sub(out: Vec2, a: Vec2, b: Vec2): Vec2 {\r\n        out.x = a.x - b.x;\r\n        out.y = a.y - b.y;\r\n        return out;\r\n    }\r\n\r\n    static subScalar(out: Vec2, a: Vec2, s: number): Vec2 {\r\n        out.x = a.x - s;\r\n        out.y = a.y - s;\r\n        return out;\r\n    }\r\n\r\n    static mul(out: Vec2, a: Vec2, b: Vec2): Vec2 {\r\n        out.x = a.x * b.x;\r\n        out.y = a.y * b.y;\r\n        return out;\r\n    }\r\n\r\n    static mulScalar(out: Vec2, a: Vec2, f: number): Vec2 {\r\n        out.x = a.x * f;\r\n        out.y = a.y * f;\r\n        return out;\r\n    }\r\n\r\n    static div(out: Vec2, a: Vec2, b: Vec2): Vec2 {\r\n        out.x = a.x / b.x;\r\n        out.y = a.y / b.y;\r\n        return out;\r\n    }\r\n\r\n    static divScalar(out: Vec2, a: Vec2, s: number) {\r\n        return Vec2.mulScalar(out, a, 1.0 / s);\r\n    }\r\n\r\n    static neg(out: Vec2, a: Vec2): Vec2 {\r\n        out.x = -a.x;\r\n        out.y = -a.y;\r\n        return out;\r\n    }\r\n\r\n    static dot(a: Vec2, b: Vec2): number {\r\n        return a.x * b.x + a.y * b.y;\r\n    }\r\n\r\n    static cross(a: Vec2, b: Vec2): number {\r\n        return a.x * b.y - a.y * b.x;\r\n    }\r\n\r\n    static normalize(out: Vec2, a: Vec2): Vec2 {\r\n        return Vec2.divScalar(out, a, a.length());\r\n    }\r\n\r\n    static distanceSQ(a: Vec2, b: Vec2): number {\r\n        let dx = a.x - b.x;\r\n        let dy = a.y - b.y;\r\n        return dx * dx + dy * dy;\r\n    }\r\n\r\n    static distance(a: Vec2, b: Vec2): number {\r\n        return Math.sqrt(Vec2.distanceSQ(a, b));\r\n    }\r\n\r\n    static lerp(out: Vec2, a: Vec2, b: Vec2, f: number): Vec2 {\r\n        out.x = (b.x - a.x) * f + a.x;\r\n        out.y = (b.y - a.y) * f + a.y;\r\n        return out;\r\n    }\r\n\r\n    static rotation(a: Vec2, b: Vec2): number {\r\n        let dx = b.x - a.x;\r\n        let dy = b.y - a.y;\r\n        if (dx == 0 && dy == 0) {\r\n            return 0;\r\n        }\r\n        let angle = Math.atan2(dy, dx) * BattleMath.kRadToDeg;\r\n        return BattleMath.trueMod(angle, 360);\r\n    }\r\n\r\n    toString() {\r\n        return `{x:${this.x}, y:${this.y}}`;\r\n    }\r\n}"]}