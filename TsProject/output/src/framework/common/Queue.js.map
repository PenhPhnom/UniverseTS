{"version":3,"file":"Queue.js","sourceRoot":"","sources":["../../../../src/framework/common/Queue.ts"],"names":[],"mappings":"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","sourcesContent":["export class Queue<T> {\r\n    private _datas: T[] = [];\r\n    private _startIndex: number = 0;\r\n    private _endIndex: number = 0;\r\n\r\n    constructor(capacity: number) {\r\n        this.inceaseCapacity(capacity);\r\n    }\r\n\r\n    clear() {\r\n        this._datas.length = 0;\r\n        this._startIndex = this._endIndex = 0;\r\n    }\r\n\r\n    add(item: T) {\r\n        let datas = this._datas;\r\n        if (this.isFull()) {\r\n            this.inceaseCapacity(datas.length * 2);\r\n        }\r\n\r\n        datas[this._endIndex] = item;\r\n        if (this._endIndex++ >= datas.length) {\r\n            this._endIndex = 0;\r\n        }\r\n    }\r\n\r\n    dequeue(): T {\r\n        if (this.isEmpty()) {\r\n            return undefined;\r\n        }\r\n\r\n        let data = this._datas[this._startIndex];\r\n        if (this._startIndex++ >= this._datas.length) {\r\n            this._startIndex = 0;\r\n        }\r\n        return data;\r\n    }\r\n\r\n    peek(): T{\r\n        if (this.isEmpty()) {\r\n            return undefined;\r\n        }\r\n        return this._datas[this._startIndex];\r\n    }\r\n\r\n    size(): number {\r\n        let start = this._startIndex;\r\n        let end = this._endIndex;\r\n        if (end >= start) {\r\n            return end - start;\r\n        }\r\n        return end + this._datas.length - start;\r\n    }\r\n\r\n    isEmpty(): boolean {\r\n        return this._endIndex == this._startIndex;\r\n    }\r\n\r\n    inceaseCapacity(capacity: number) {\r\n        let prevSize = this.size();\r\n        if (capacity <= prevSize) {\r\n            return;\r\n        }\r\n\r\n        let datas = this._datas;\r\n        datas.length = capacity;\r\n\r\n        let prevStartIndex = this._startIndex;\r\n        let prevEndIndex = this._endIndex;\r\n        if (prevEndIndex < prevStartIndex) {\r\n            for(let i=0; i<prevEndIndex; i++) {\r\n                datas[(prevSize + i) % capacity] = datas[i];\r\n            }\r\n            this._endIndex = (prevSize + prevEndIndex) % capacity;\r\n        }\r\n    }\r\n\r\n    private isFull(): boolean {\r\n        return ((this._endIndex + 1) % this._datas.length) == this._startIndex;\r\n    }\r\n}"]}