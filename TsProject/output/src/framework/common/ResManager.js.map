{"version":3,"file":"ResManager.js","sourceRoot":"","sources":["../../../../src/framework/common/ResManager.ts"],"names":[],"mappings":"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","sourcesContent":["\r\nimport { Singleton } from './Singleton';\r\nimport { $promise } from 'puerts';\r\nimport {NiceTS, UnityEngine} from 'csharp';\r\nimport { Logger } from '../logger/Logger';\r\n\r\nexport class ResManager extends Singleton<ResManager>{\r\n\r\n    private _pkgMap:Map<string,number> = new Map<string,number>();\r\n\r\n    constructor(){\r\n        super();\r\n    }\r\n\r\n    async loadFairyGUIPackage(packageName:string){\r\n\r\n        try{\r\n            let count = this._pkgMap.get(packageName);\r\n            if(count == null || count < 1){\r\n                //没有缓存，加载\r\n                let address = packageName+\"_fui.bytes\";\r\n                let task = NiceTS.ResourceManager.LoadFairyGUIPackage(address,packageName);\r\n                await $promise(task);\r\n                \r\n                this._pkgMap.set(packageName, 1);\r\n            }\r\n            else{\r\n                this._pkgMap.set(packageName, count+1);\r\n            }\r\n        }catch(ex){\r\n            Logger.error(`Load fairyGUI :${packageName} : ${ex}`)\r\n        }\r\n    }\r\n    \r\n    public releaseFairyGUIPackage(packageName){\r\n\r\n        let count = this._pkgMap.get(packageName);\r\n        if(count!=null && count>1){\r\n            this._pkgMap.set(packageName, count-1);\r\n        }else{\r\n\r\n            Logger.log(`release fagui package:${packageName}`);\r\n            this._pkgMap.delete(packageName);\r\n            NiceTS.ResourceManager.ReleaseFGUIPackage(packageName);\r\n        }\r\n    }\r\n\r\n    async loadScene(sceneName:string, mode = UnityEngine.SceneManagement.LoadSceneMode.Single){\r\n        try{\r\n          \r\n            let task = NiceTS.ResourceManager.LoadScene(sceneName, mode,(progress:Number)=>{\r\n                Logger.log(\"load scene: \"+progress)\r\n            });\r\n\r\n            let scenInstance = await $promise(task)\r\n            return scenInstance\r\n\r\n        }catch(ex){\r\n\r\n            Logger.error(`Load Scene :${sceneName} : ${ex}`)\r\n\r\n            return null;\r\n        }\r\n    }\r\n\r\n\r\n    async unloadScene(sceneInstance:UnityEngine.ResourceManagement.ResourceProviders.SceneInstance){\r\n        try{\r\n            let task= NiceTS.ResourceManager.UnloadScene(sceneInstance)\r\n            let go = await $promise(task);\r\n            return go;\r\n        }catch(ex){\r\n\r\n            Logger.error(`Unload scene  : ${ex}`)\r\n\r\n            return null;\r\n        }\r\n    }\r\n\r\n    public unloadSceneByName(sceneName:string){\r\n\r\n        NiceTS.ResourceManager.UnloadSceneByName(sceneName);\r\n    }\r\n\r\n    async loadPrefab(address:string){\r\n\r\n        try{\r\n            let task= NiceTS.ResourceManager.LoadPrefab(address);\r\n            let go = await $promise(task);\r\n            return go;\r\n        }catch(ex){\r\n\r\n            Logger.error(`Load prefab :${address} : ${ex}`)\r\n\r\n            return null;\r\n        }\r\n\r\n    }\r\n\r\n    async loadTextAsset(address:string){\r\n\r\n        try{\r\n            let task = NiceTS.ResourceManager.LoadTextAsset(address);\r\n            let go = await $promise(task);\r\n            return go;\r\n        }catch(ex){\r\n            Logger.error(`Load textasset :${address} : ${ex}`)\r\n\r\n            return null;\r\n        }\r\n    }\r\n\r\n\r\n    async loadTextBytes(address:string){\r\n\r\n        try{\r\n            let task = NiceTS.ResourceManager.LoadTextBytes(address);\r\n            let bytes = await $promise(task);\r\n            return bytes;\r\n        }catch(ex){\r\n            Logger.error(`LoadTextBytes :${address} : ${ex}`)\r\n        }\r\n    }\r\n\r\n    async loadSprite(address:string){\r\n\r\n        try{\r\n            let task = NiceTS.ResourceManager.LoadSprite(address);\r\n            let go = await $promise(task);\r\n            return go;\r\n\r\n        }catch(ex){\r\n            Logger.error(`Load sprite :${address} : ${ex}`)\r\n\r\n            return null;\r\n        }\r\n    }\r\n\r\n\r\n    public releaseAddressGO(go:any){\r\n\r\n        NiceTS.ResourceManager.ReleaseAddressGO(go);\r\n    }\r\n\r\n\r\n    \r\n}"]}