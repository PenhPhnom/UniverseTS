{"version":3,"file":"Prando.js","sourceRoot":"","sources":["../../../../src/framework/common/Prando.ts"],"names":[],"mappings":"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","sourcesContent":["export default class Prando {\r\n\r\n\tprivate static MIN: number = -2147483648; // Int32 min\r\n\tprivate static MAX: number = 2147483647; // Int32 max\r\n\r\n\tprivate _seed: number;\r\n\tprivate _value: number = NaN;\r\n\r\n\r\n\t// ================================================================================================================\r\n\t// CONSTRUCTOR ----------------------------------------------------------------------------------------------------\r\n\r\n\t/**\r\n\t * Generate a new Prando pseudo-random number generator.\r\n\t *\r\n\t * @param seed - A number or string seed that determines which pseudo-random number sequence will be created. Defaults to current time.\r\n\t */\r\n\tconstructor(seed?: number | string) {\r\n\t\tif (typeof (seed) === \"string\") {\r\n\t\t\t// String seed\r\n\t\t\tthis._seed = this.hashCode(seed);\r\n\t\t} else if (typeof (seed) === \"number\") {\r\n\t\t\t// Numeric seed\r\n\t\t\tthis._seed = this.getSafeSeed(seed);\r\n\t\t} else {\r\n\t\t\t// Pseudo-random seed\r\n\t\t\tthis._seed = this.getSafeSeed(Prando.MIN + Math.floor((Prando.MAX - Prando.MIN) * Math.random()));\r\n\t\t}\r\n\t\tthis.reset();\r\n\t}\r\n\r\n\r\n\t// ================================================================================================================\r\n\t// PUBLIC INTERFACE -----------------------------------------------------------------------------------------------\r\n\r\n\t/**\r\n\t * Generates a pseudo-random number between a lower (inclusive) and a higher (exclusive) bounds.\r\n\t *\r\n\t * @param min - The minimum number that can be randomly generated.\r\n\t * @param pseudoMax - The maximum number that can be randomly generated (exclusive).\r\n\t * @return The generated pseudo-random number.\r\n\t */\r\n\tpublic next(min: number = 0, pseudoMax: number = 1): number {\r\n\t\tthis.recalculate();\r\n\t\treturn this.map(this._value, Prando.MIN, Prando.MAX, min, pseudoMax);\r\n\t}\r\n\r\n\t/**\r\n\t * Generates a pseudo-random integer number in a range (inclusive).\r\n\t *\r\n\t * @param min - The minimum number that can be randomly generated.\r\n\t * @param max - The maximum number that can be randomly generated.\r\n\t * @return The generated pseudo-random number.\r\n\t */\r\n\tpublic nextInt(min: number = 10, max: number = 100): number {\r\n\t\tthis.recalculate();\r\n\t\treturn Math.floor(this.map(this._value, Prando.MIN, Prando.MAX, min, max + 1));\r\n\t}\r\n\r\n\t/**\r\n\t * Generates a pseudo-random string sequence of a particular length from a specific character range.\r\n\t *\r\n\t * Note: keep in mind that creating a random string sequence does not guarantee uniqueness; there is always a\r\n\t * 1 in (char_length^string_length) chance of collision. For real unique string ids, always check for\r\n\t * pre-existing ids, or employ a robust GUID/UUID generator.\r\n\t *\r\n\t * @param length - Length of the strting to be generated.\r\n\t * @param chars - Characters that are used when creating the random string. Defaults to all alphanumeric chars (A-Z, a-z, 0-9).\r\n\t * @return The generated string sequence.\r\n\t */\r\n\tpublic nextString(length: number = 16, chars: string = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\"): string {\r\n\t\tlet str = \"\";\r\n\t\twhile (str.length < length) {\r\n\t\t\tstr += this.nextChar(chars);\r\n\t\t}\r\n\t\treturn str;\r\n\t}\r\n\r\n\t/**\r\n\t * Generates a pseudo-random string of 1 character specific character range.\r\n\t *\r\n\t * @param chars - Characters that are used when creating the random string. Defaults to all alphanumeric chars (A-Z, a-z, 0-9).\r\n\t * @return The generated character.\r\n\t */\r\n\tpublic nextChar(chars: string = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\"): string {\r\n\t\tthis.recalculate();\r\n\t\treturn chars.substr(this.nextInt(0, chars.length - 1), 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Picks a pseudo-random item from an array. The array is left unmodified.\r\n\t *\r\n\t * Note: keep in mind that while the returned item will be random enough, picking one item from the array at a time\r\n\t * does not guarantee nor imply that a sequence of random non-repeating items will be picked. If you want to\r\n\t * *pick items in a random order* from an array, instead of *pick one random item from an array*, it's best to\r\n\t * apply a *shuffle* transformation to the array instead, then read it linearly.\r\n\t *\r\n\t * @param array - Array of any type containing one or more candidates for random picking.\r\n\t * @return An item from the array.\r\n\t */\r\n\tpublic nextArrayItem<T>(array: T[]): T {\r\n\t\tthis.recalculate();\r\n\t\treturn array[this.nextInt(0, array.length - 1)];\r\n\t}\r\n\r\n\t/**\r\n\t * Generates a pseudo-random boolean.\r\n\t *\r\n\t * @return A value of true or false.\r\n\t */\r\n\tpublic nextBoolean(): boolean {\r\n\t\tthis.recalculate();\r\n\t\treturn this._value > 0.5;\r\n\t}\r\n\r\n\t/**\r\n\t * Skips ahead in the sequence of numbers that are being generated. This is equivalent to\r\n\t * calling next() a specified number of times, but faster since it doesn't need to map the\r\n\t * new random numbers to a range and return it.\r\n\t *\r\n\t * @param iterations - The number of items to skip ahead.\r\n\t */\r\n\tpublic skip(iterations: number = 1): void {\r\n\t\twhile (iterations-- > 0) {\r\n\t\t\tthis.recalculate();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Reset the pseudo-random number sequence back to its starting seed. Further calls to next()\r\n\t * will then produce the same sequence of numbers it had produced before. This is equivalent to\r\n\t * creating a new Prando instance with the same seed as another Prando instance.\r\n\t *\r\n\t * Example:\r\n\t * let rng = new Prando(12345678);\r\n\t * console.log(rng.next()); // 0.6177754114889017\r\n\t * console.log(rng.next()); // 0.5784605181725837\r\n\t * rng.reset();\r\n\t * console.log(rng.next()); // 0.6177754114889017 again\r\n\t * console.log(rng.next()); // 0.5784605181725837 again\r\n\t */\r\n\tpublic reset(): void {\r\n\t\tthis._value = this._seed;\r\n\t}\r\n\r\n\r\n\t// ================================================================================================================\r\n\t// PRIVATE INTERFACE ----------------------------------------------------------------------------------------------\r\n\r\n\tprivate recalculate(): void {\r\n\t\tthis._value = this.xorshift(this._value);\r\n\t}\r\n\r\n\tprivate xorshift(value: number) {\r\n\t\t// Xorshift*32\r\n\t\t// Based on George Marsaglia's work: http://www.jstatsoft.org/v08/i14/paper\r\n\t\tvalue ^= value << 13;\r\n\t\tvalue ^= value >> 17;\r\n\t\tvalue ^= value << 5;\r\n\t\treturn value;\r\n\t}\r\n\r\n\tprivate map(val: number, minFrom: number, maxFrom: number, minTo: number, maxTo: number) {\r\n\t\treturn ((val - minFrom) / (maxFrom - minFrom)) * (maxTo - minTo) + minTo;\r\n\t}\r\n\r\n\tprivate hashCode(str: string): number {\r\n\t\tlet hash = 0;\r\n\t\tif (str) {\r\n\t\t\tconst l = str.length;\r\n\t\t\tfor (let i = 0; i < l; i++) {\r\n\t\t\t\thash = ((hash << 5) - hash) + str.charCodeAt(i);\r\n\t\t\t\thash |= 0;\r\n\t\t\t\thash = this.xorshift(hash);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this.getSafeSeed(hash);\r\n\t}\r\n\r\n\tprivate getSafeSeed(seed: number) {\r\n\t\tif (seed === 0) return 1;\r\n\t\treturn seed;\r\n\t}\r\n}\r\n\r\n"]}