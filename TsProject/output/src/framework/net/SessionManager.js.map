{"version":3,"file":"SessionManager.js","sourceRoot":"","sources":["../../../../src/framework/net/SessionManager.ts"],"names":[],"mappings":"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","sourcesContent":["\r\nimport { Opcode } from \"../../data/pb/Opcode\";\r\nimport { GameConfig } from \"../../global/GameConfig\";\r\nimport { Singleton } from \"../common/Singleton\";\r\nimport { Logger } from \"../logger/Logger\";\r\nimport { GameSession } from \"./GameSession\";\r\nimport { NetErrorCode } from \"./NetErrorCode\";\r\n\r\n\r\nexport class SessionManager extends Singleton<SessionManager>{\r\n\r\n    private sessionReam:GameSession;\r\n    private sessionGate:GameSession;\r\n\r\n\r\n    public get realmRpcID(){\r\n        return this.sessionReam.rpcId;\r\n    }\r\n\r\n    public get gateRpcID(){\r\n        return this.sessionGate.rpcId;\r\n    }\r\n\r\n    public async connectRealmServer():Promise<boolean> {\r\n\r\n        let promise = new Promise<boolean>(resove =>{\r\n            this.sessionReam = GameSession.Instance(GameSession).connectChannel(\r\n                GameConfig.realmServerIP+\":\"+GameConfig.realmServerPort,\r\n                (channel:any,code:number)=>{\r\n                    if(code == NetErrorCode.ERR_SocketConnSucc){\r\n                        this.sessionReam.id = channel.Id;\r\n                  \r\n                        resove(true);\r\n                    }else{\r\n            \r\n                        resove(false);\r\n            \r\n                        Logger.error(\"login reamserver err, code: \"+code + \",id:\"+channel.Id);\r\n            \r\n                    }\r\n                }\r\n            );\r\n\r\n        });\r\n        return promise\r\n    }\r\n\r\n    \r\n    public disconnectRealmServer(){\r\n        this.sessionReam.disconnect();\r\n        this.sessionReam = null;\r\n    }\r\n\r\n\r\n    public async sendRealmMsg(opcode:number,msg:any):Promise<any>{\r\n        \r\n        let rpcID = this.sessionReam.rpcId\r\n        let promise = new Promise<any>((resove) => {\r\n\r\n            let buf = Opcode.encode(opcode, msg)\r\n\r\n            this.sessionReam.send(opcode, rpcID, buf, (response:any)=>{\r\n            \r\n                resove(response)\r\n            });\r\n        })\r\n        \r\n        return promise\r\n    }\r\n\r\n\r\n    public async connectGateServer(address:string):Promise<boolean>{\r\n\r\n        let promise = new Promise<boolean>(resove =>{\r\n            this.sessionGate = GameSession.Instance(GameSession).connectChannel(\r\n                address,\r\n                (channel:any,code:number)=>{\r\n                    Logger.log(\"login Gate Server: \"+code);\r\n    \r\n                    if(code == NetErrorCode.ERR_SocketConnSucc){\r\n                        this.sessionGate.id = channel.Id;\r\n                    \r\n                        resove(true)\r\n                    }else{\r\n                        resove(false)\r\n            \r\n                        Logger.error(\"gate server err, code: \"+code + \",id:\"+channel.Id);\r\n                    }\r\n                }\r\n            );\r\n\r\n        });\r\n        return promise\r\n    }\r\n\r\n\r\n    public disconnectGateServer(){\r\n        this.sessionGate.disconnect();\r\n        this.sessionGate = null;\r\n    }\r\n\r\n    public async sendGateMsg(opcode:number, msg:any):Promise<any>{\r\n\r\n        let rpcID = this.sessionGate.rpcId\r\n        let promise = new Promise<any>((resove) => {\r\n\r\n            let buf = Opcode.encode(opcode, msg)\r\n\r\n            this.sessionGate.send(opcode, rpcID, buf, (response:any)=>{\r\n            \r\n                resove(response)\r\n            });\r\n        })\r\n        \r\n        return promise\r\n\r\n    }\r\n}   \r\n"]}