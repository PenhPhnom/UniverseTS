{"version":3,"file":"GameSession.js","sourceRoot":"","sources":["../../../../src/framework/net/GameSession.ts"],"names":[],"mappings":"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","sourcesContent":["import { Singleton } from \"../common/Singleton\";\r\nimport { Opcode } from \"../../data/pb/Opcode\";\r\nimport { NetErrorCode } from \"./NetErrorCode\";\r\nimport { NiceTS } from \"csharp\";\r\nimport { MessageParser } from \"./MessageParser\";\r\nimport { Logger } from \"../logger/Logger\";\r\n\r\n\r\nexport class MsgPack{\r\n    public sendTime:number;\r\n    public callback:Function;\r\n    public retryTimes:number = 0;\r\n    public bytes:Uint8Array;\r\n}\r\n\r\nexport class GameSession extends Singleton<GameSession>{\r\n\r\n    public id:number = 0;  //session ID\r\n    private reSendInterval:number = 10000; //10秒重发一次\r\n    private timeoutInterval:number = 5000; //5秒检查一次是否超时\r\n    private maxReSendTimes:number = 5; //最大重发次数\r\n    private timeoutIimer:any;\r\n\r\n    private _rpcId:number = 1;\r\n    private channel:any;\r\n    private requestCallback:Map<number,MsgPack> = new Map<number,MsgPack>();\r\n    private listeners:Map<number,Function> = new Map<number,Function>();\r\n\r\n    //返回的服务器ID, 类型\r\n    private _serverId:number = -1;\r\n    private _serverType:number = 1;\r\n\r\n    constructor(){\r\n        super();\r\n    }\r\n\r\n    public get rpcId():number{\r\n        return ++this._rpcId;\r\n    }\r\n\r\n    //address-> ip:port\r\n    public connectChannel(address:string, connCaback:any){\r\n\r\n        this.channel = NiceTS.TService.Instance.GetChannel();\r\n        \r\n        this.channel.errorCallback = (channel:any, code:number)=>{\r\n            if(code == NetErrorCode.ERR_SocketConnSucc){\r\n                this.timeoutIimer = setInterval(()=>{\r\n                    this.checkTimeoutMsg();\r\n                }, this.timeoutInterval);\r\n            }\r\n\r\n            connCaback(channel, code);\r\n        };\r\n        \r\n        this.channel.readCallback = (buffer:Uint8Array)=>{\r\n            this.onReceive(buffer);\r\n        };\r\n\r\n        this.channel.Connect(address);\r\n\r\n        return this;\r\n    }\r\n\r\n    //接收服务器通知\r\n    public listen(opcode:number,callback:Function){\r\n        this.listeners.set(opcode, callback);\r\n    }\r\n\r\n    //发送protoubf消息\r\n    //消息： rpc_id[4] - opcode[2] - server_id[2] - server_type[1] - \r\n    public send(opcode:number,rpcid:number, message:Uint8Array, callBack:Function){\r\n        \r\n        //封装消息：\r\n        let rpcBuf:Uint8Array = MessageParser.encodeInt(rpcid); //4\r\n        let opcodeBuf:Uint8Array = MessageParser.encodeShort(opcode); //2\r\n        let serveridBuf:Uint8Array = MessageParser.encodeShort(this._serverId); //2\r\n        let servertypeBuf:Uint8Array = MessageParser.encodeByte(this._serverType); //1\r\n\r\n\r\n        let sendArray:Uint8Array = new Uint8Array(4 + 2 + 2 + 1 +message.length);\r\n        sendArray.set(rpcBuf);\r\n        sendArray.set(opcodeBuf,    4);\r\n        sendArray.set(serveridBuf,  4 + 2);\r\n        sendArray.set(servertypeBuf, 4 + 2 + 2);\r\n        sendArray.set(message,       4 + 2 + 2 + 1);\r\n        \r\n        if(callBack != null){\r\n            let msgPack:MsgPack = new MsgPack();\r\n            msgPack.sendTime = new Date().getTime();\r\n            msgPack.callback = callBack;\r\n            msgPack.bytes = sendArray;\r\n\r\n            this.requestCallback.set(rpcid, msgPack);\r\n        }\r\n        // for(let i in sendArray){\r\n        //     Logger.log(\"TS -- send array: \"+i);\r\n        // }\r\n        //Logger.log(\"send array: \"+sendArray);\r\n        this.channel.Send(sendArray);\r\n    }\r\n\r\n    private reSend(bytes:Uint8Array){\r\n        this.channel.Send(bytes);\r\n    }\r\n\r\n    public onReceive(buffer:Uint8Array){\r\n        \r\n        let msgBuf = new Uint8Array(buffer);\r\n\r\n        let rpcid = MessageParser.decodeInt(msgBuf.subarray(0,4));\r\n        let opcode = MessageParser.decodeShort(msgBuf.subarray(4,6));\r\n        let serverid = MessageParser.decodeShort(msgBuf.subarray(6,8));\r\n        let servertype = MessageParser.decodeByte(msgBuf.subarray(8,9));\r\n\r\n        this._serverId = serverid;\r\n        this._serverType = servertype;\r\n\r\n        let msgBytes:Uint8Array = msgBuf.subarray(9);\r\n\r\n        try{\r\n            let decodeMsg =  Opcode.decode(opcode, msgBytes);\r\n\r\n\r\n            if(rpcid==undefined || !this.requestCallback.has(rpcid)){\r\n                //检查是否是服务器下发的消息\r\n                if(this.listeners.has(opcode)){\r\n                    let listen = this.listeners.get(opcode);\r\n                    listen(decodeMsg.msgObj);\r\n                }\r\n    \r\n            }else{\r\n                let msgPack:MsgPack = this.requestCallback.get(rpcid);\r\n                msgPack.callback(decodeMsg.msgObj);  \r\n    \r\n                this.requestCallback.delete(rpcid);\r\n    \r\n            }\r\n        }catch(e){\r\n            Logger.error(\"parse msg error, opcode:\"+opcode)\r\n        }\r\n        \r\n\r\n    }\r\n\r\n    private checkTimeoutMsg(){\r\n\r\n        let currTime = new Date().getTime();\r\n\r\n        this.requestCallback.forEach((value, key) =>{\r\n\r\n            if(value.retryTimes >= this.maxReSendTimes) {\r\n                //超过最大重发次数，丢弃\r\n                Logger.log(`Message resend too more, opcode:${key}, lastsend:${value.sendTime}`);\r\n                this.requestCallback.delete(key); \r\n            }else{\r\n\r\n                if((currTime - value.sendTime) >= this.reSendInterval){\r\n                    value.retryTimes++;\r\n                    value.sendTime = currTime;\r\n                    //重发消息\r\n                    this.reSend(value.bytes);\r\n                    Logger.log(`resend message:, opcode:${key}, retry times:${value.retryTimes}`);\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n\r\n    public disconnect():void{\r\n\r\n        clearInterval(this.timeoutIimer);\r\n\r\n        this.channel.Dispose();\r\n    }\r\n}"]}