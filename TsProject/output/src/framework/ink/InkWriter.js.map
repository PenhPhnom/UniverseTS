{"version":3,"file":"InkWriter.js","sourceRoot":"","sources":["../../../../src/framework/ink/InkWriter.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,KAAK,EAAE,MAAM,oBAAoB,CAAC;AAC3C,OAAO,EAAE,MAAM,EAAE,MAAM,kBAAkB,CAAC;AAC1C,OAAO,EAAE,iBAAiB,EAAE,MAAM,qBAAqB,CAAC;AACxD,OAAO,EAAE,mBAAmB,EAAE,MAAM,uBAAuB,CAAC;AAE5D,MAAM,OAAO,SAAS;IAWlB,YAAY,SAAgB;QAHpB,oBAAe,GAAwB,IAAI,GAAG,EAAmB,CAAC;QAItE,IAAI,CAAC,gBAAgB,EAAE,CAAC;QACxB,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC;QAC5B,IAAI,CAAC,IAAI,EAAE,CAAC;IAChB,CAAC;IAEM,IAAI;QACP,IAAI,UAAU,GAAU,EAAE,CAAC;QAC3B,IAAG,UAAU,IAAE,IAAI,IAAI,UAAU,IAAE,EAAE,EAAC,CAAC;YACnC,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC;QAClD,CAAC;IACL,CAAC;IAEO,WAAW,CAAC,IAAW;QAC3B,IAAI,CAAC,aAAa,GAAG,IAAI,KAAK,CAAC,IAAI,CAAC,CAAC;IAGzC,CAAC;IAEM,UAAU,CAAC,QAAe;QAC7B,IAAG,IAAI,CAAC,aAAa,IAAI,IAAI,EAAC,CAAC;YAC3B,MAAM,CAAC,IAAI,CAAC,oEAAoE,CAAC,CAAC;YAClF,OAAO;QACX,CAAC;QAED,IAAI,CAAC,aAAa,CAAC,gBAAgB,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;QAEnD,IAAI,QAAQ,GAAqB,IAAI,iBAAiB,EAAE,CAAC;QACzD,QAAQ,CAAC,cAAc,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;QAE7C,IAAI,CAAC,YAAY,EAAE,CAAC;IACxB,CAAC;IAGO,UAAU;QACd,MAAM,CAAC,GAAG,CAAC,gBAAgB,CAAC,CAAC;QAE7B,OAAO,IAAI,CAAC;IAChB,CAAC;IAEO,gBAAgB;QACpB,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,aAAa,EAAC,IAAI,CAAC,UAAU,CAAC,CAAA;IAC3D,CAAC;IAEO,aAAa,CAAC,OAAc,EAAE,IAAa;QAC/C,IAAG,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,OAAO,CAAC,EAAC,CAAC;YAClC,OAAO,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,CAAC;QACnD,CAAC;QACD,MAAM,CAAC,KAAK,CAAC,sCAAsC,GAAC,OAAO,CAAC,CAAC;QAC7D,OAAO,IAAI,CAAC;IAChB,CAAC;IAEO,gBAAgB,CAAC,IAAW;QAChC,IAAI,GAAG,GAAU,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,cAAc,CAAC,CAAC;QACxD,IAAI,IAAI,GAAU,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,iBAAiB,CAAC,CAAC;QAC5D,IAAG,IAAI,IAAI,CAAC,CAAC,EAAC,CAAC;YACX,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC;QACvB,CAAC;QAED,IAAI,MAAM,GAAU,IAAI,GAAG,CAAC,GAAG,GAAG,SAAS,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC;QACnE,OAAO,IAAI,CAAC,MAAM,CAAC,GAAG,GAAG,SAAS,CAAC,cAAc,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC,IAAI,EAAE,CAAC;IAC7E,CAAC;IAEM,gBAAgB,CAAC,IAAW;QAC/B,IAAI,GAAG,GAAU,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,iBAAiB,CAAC,CAAC;QAC3D,IAAG,GAAG,IAAI,CAAC,CAAC,EAAC,CAAC;YACV,OAAO,EAAE,CAAC;QACd,CAAC;QACD,IAAI,MAAM,GAAU,IAAI,CAAC,MAAM,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC;QAC5C,IAAI,IAAI,GAAY,IAAI,CAAC,MAAM,CAAC,GAAG,GAAC,CAAC,EAAE,MAAM,CAAC;YAC1B,IAAI,EAAE;YACN,KAAK,CAAC,SAAS,CAAC,qBAAqB,CAAC,CAAC;QAC3D,KAAK,IAAI,CAAC,GAAQ,CAAC,EAAE,CAAC,GAAC,IAAI,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;YACtC,IAAI,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC;QAC7B,CAAC;QACD,OAAO,IAAI,CAAC;IAChB,CAAC;IAEM,cAAc,CAAC,IAAW;QAC7B,IAAG,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,cAAc,CAAC,EAAC,CAAC;YAC1C,OAAO,CAAC,GAAG,EAAC,IAAI,CAAC,IAAI,EAAE,CAAC,CAAC;QAC7B,CAAC;QAED,IAAI,KAAK,GAAY,IAAI,CAAC,KAAK,CAAC,GAAG,EAAC,CAAC,CAAC,CAAC;QACvC,IAAG,KAAK,CAAC,MAAM,GAAG,CAAC,EAAC,CAAC;YACjB,IAAI,OAAO,GAAU,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC;YACrC,IAAI,YAAY,GAAU,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC;YAE1C,OAAO,CAAC,OAAO,EAAE,YAAY,CAAC,CAAC;QACnC,CAAC;QAED,OAAO,CAAC,GAAG,EAAC,IAAI,CAAC,IAAI,EAAE,CAAC,CAAC;IAC7B,CAAC;IAEM,gBAAgB;QACnB,IAAI,SAAS,GAAG,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC;QAClD,UAAU;IACd,CAAC;IAEM,WAAW;QACd,OAAO,IAAI,CAAC,aAAa,CAAC,WAAW,CAAC;IAC1C,CAAC;IAEM,YAAY;QACf,IAAG,IAAI,CAAC,aAAa,IAAI,IAAI,EAAC,CAAC;YAC3B,MAAM,CAAC,IAAI,CAAC,oEAAoE,CAAC,CAAC;QACtF,CAAC;aACI,IAAG,IAAI,CAAC,aAAa,CAAC,WAAW,EAAC,CAAC;YACpC,IAAI,IAAI,GAAU,IAAI,CAAC,aAAa,CAAC,QAAQ,EAAE,CAAC,IAAI,EAAE,CAAC;YACvD,IAAG,IAAI,IAAI,EAAE,EAAC,CAAC;gBACX,IAAI,CAAC,YAAY,EAAE,CAAC;gBACpB,OAAM;YACV,CAAC;YAED,IAAI,OAAc,CAAC;YACnB,IAAI,YAAmB,CAAC;YAExB,CAAC,OAAO,EAAE,YAAY,CAAC,GAAG,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;YAEpD,IAAI,WAAW,GAAU,IAAI,CAAC;YAC9B,IAAI,IAAI,GAAY,IAAI,CAAC;YACzB,IAAG,YAAY,CAAC,UAAU,CAAC,SAAS,CAAC,cAAc,CAAC,EAAC,CAAC;gBAClD,WAAW,GAAG,IAAI,CAAC,gBAAgB,CAAC,YAAY,CAAC,CAAC;gBAClD,IAAI,GAAG,IAAI,CAAC,gBAAgB,CAAC,YAAY,CAAC,CAAC;gBAC3C,IAAG,WAAW,IAAI,IAAI,IAAI,WAAW,IAAG,EAAE,EAAC,CAAC;oBACxC,IAAG,IAAI,CAAC,aAAa,CAAC,WAAW,EAAE,IAAI,CAAC,EAAC,CAAC;wBACtC,IAAI,CAAC,YAAY,EAAE,CAAC;oBACxB,CAAC;gBACL,CAAC;YACL,CAAC;iBAAI,CAAC;gBACF,gBAAgB;gBAChB,mBAAmB,CAAC,QAAQ,CAAC,mBAAmB,CAAC,CAAC,qBAAqB,CACnE,mBAAmB,CAAC,cAAc,EAClC,YAAY,EACZ,OAAO,EACP,IAAI,CAAC,aAAa,CAAC,WAAW,EAC9B,IAAI,CAAC,aAAa,CAAC,cAAc,CACpC,CAAC;YACN,CAAC;QACL,CAAC;aACI,IAAG,IAAI,CAAC,aAAa,CAAC,cAAc,CAAC,MAAM,GAAG,CAAC,EAAC,CAAC;YAClD,oBAAoB;YACpB,mBAAmB,CAAC,QAAQ,CAAC,mBAAmB,CAAC,CAAC,yBAAyB,CACvE,mBAAmB,CAAC,kBAAkB,EACtC,IAAI,CAAC,aAAa,CAAC,cAAc,CACpC,CAAC;QACN,CAAC;aAAI,CAAC;YACF,iBAAiB;YACjB,mBAAmB,CAAC,QAAQ,CAAC,mBAAmB,CAAC,CAAC,sBAAsB,CACpE,mBAAmB,CAAC,eAAe,CACtC,CAAA;QACL,CAAC;IACL,CAAC;IAEM,YAAY,CAAC,WAAkB;QAClC,IAAG,IAAI,CAAC,aAAa,IAAI,IAAI,EAAC,CAAC;YAC3B,MAAM,CAAC,IAAI,CAAC,6DAA6D,CAAC,CAAC;YAC3E,OAAO;QACX,CAAC;QACD,IAAI,CAAC,aAAa,CAAC,iBAAiB,CAAC,WAAW,CAAC,CAAC;QAClD,IAAI,CAAC,YAAY,EAAE,CAAC;IACxB,CAAC;IAEM,WAAW,CAAC,YAAmB;QAClC,OAAO,IAAI,CAAC,aAAa,CAAC,cAAc,CAAC,mBAAmB,CAAC,YAAY,CAAC,CAAC;IAC/E,CAAC;IAEM,WAAW,CAAC,YAAmB,EAAE,KAAS;QAC7C,IAAI,CAAC,aAAa,CAAC,cAAc,CAAC,CAAC,CAAC,YAAY,EAAE,KAAK,CAAC,CAAC;IAC7D,CAAC;;AAlLa,wBAAc,GAAU,aAAa,AAAvB,CAAwB;AACtC,wBAAc,GAAU,KAAK,AAAf,CAAgB;AAC9B,2BAAiB,GAAU,GAAG,AAAb,CAAc;AAC/B,+BAAqB,GAAU,GAAG,AAAb,CAAc","sourcesContent":["import { Story } from \"inkjs/engine/Story\";\r\nimport { Logger } from \"../logger/Logger\";\r\nimport { InkStateInspector } from \"./InkStateInspector\";\r\nimport { StoryMessageManager } from \"./StoryMessageManager\";\r\n\r\nexport class InkWriter{\r\n\r\n    public static DEBUG_STORY_ID:string = \"DEBUG_STORY\";\r\n    public static COMMAND_PREFIX:string = \">>>\";\r\n    public static COMMAND_DELIMITER:string = \":\";\r\n    public static COMMAND_ARG_DELIMITER:string = ',';\r\n\r\n    private _currentStory:Story;\r\n    private _allInkCommands:Map<string,Function> = new Map<string,Function>();\r\n\r\n\r\n    constructor(storyJson:string){\r\n        this.setupInkCommands();\r\n        this.createStroy(storyJson);\r\n        this.load();\r\n    }\r\n\r\n    public load():void{\r\n        let storyState:string = \"\";\r\n        if(storyState!=null && storyState!=\"\"){\r\n            this._currentStory.state.LoadJson(storyState);\r\n        }\r\n    }\r\n\r\n    private createStroy(json:string){\r\n        this._currentStory = new Story(json);\r\n\r\n       \r\n    }\r\n\r\n    public beginStory(knotName:string){\r\n        if(this._currentStory == null){\r\n            Logger.warn(\"Trying to AdvanceStory in InkWriter when no story has been created\");\r\n            return;\r\n        }\r\n\r\n        this._currentStory.ChoosePathString(knotName, true);\r\n\r\n         let inkState:InkStateInspector = new InkStateInspector();\r\n         inkState.BindInkMethods(this._currentStory);\r\n\r\n        this.advanceStory();\r\n    }\r\n\r\n\r\n    private giveReward():boolean{\r\n        Logger.log(\"give reward...\");\r\n\r\n        return true;\r\n    }\r\n\r\n    private setupInkCommands():void{\r\n        this._allInkCommands.set(\"GIVE_REWARD\",this.giveReward)\r\n    }\r\n\r\n    private handleCommand(command:string, args:string[]):boolean{\r\n        if(this._allInkCommands.has(command)){\r\n            return this._allInkCommands.get(command)(args);\r\n        }\r\n        Logger.error(\"Could not find InkCommand with name:\"+command);\r\n        return true;\r\n    }\r\n\r\n    private parseCommandName(text:string):string{\r\n        let num:number = text.indexOf(InkWriter.COMMAND_PREFIX);\r\n        let num2:number = text.indexOf(InkWriter.COMMAND_DELIMITER);\r\n        if(num2 == -1){\r\n            num2 = text.length;\r\n        }\r\n\r\n        let length:number = num2 - (num + InkWriter.COMMAND_PREFIX.length);\r\n        return text.substr(num + InkWriter.COMMAND_PREFIX.length, length).trim();\r\n    }\r\n\r\n    public parseCommandArgs(text:string):string[]{\r\n        let num:number = text.indexOf(InkWriter.COMMAND_DELIMITER);\r\n        if(num == -1){\r\n            return [];\r\n        }\r\n        let length:number = text.length - (num + 1);\r\n        let list:string[] = text.substr(num+1, length).\r\n                            trim().\r\n                            split(InkWriter.COMMAND_ARG_DELIMITER);\r\n        for (let i:number=0; i<list.length; i++) {\r\n            list[i] = list[i].trim();\r\n        }\r\n        return list;\r\n    }\r\n\r\n    public extractSpeaker(line:string):[string,string]{\r\n        if(line.startsWith(InkWriter.COMMAND_PREFIX)){\r\n            return [\"0\",line.trim()];\r\n        }\r\n\r\n        let array:string[] = line.split(':',2);\r\n        if(array.length > 1){\r\n            let speakID:string = array[0].trim();\r\n            let speakContent:string = array[1].trim();\r\n\r\n            return [speakID, speakContent];\r\n        }\r\n\r\n        return [\"0\",line.trim()];\r\n    }\r\n\r\n    public saveCurrentStory():void{\r\n        let currState = this._currentStory.state.toJson();\r\n        //TODOｓａｖｅ\r\n    }\r\n\r\n    public canContinue():boolean{\r\n        return this._currentStory.canContinue;\r\n    }\r\n\r\n    public advanceStory():void{\r\n        if(this._currentStory == null){\r\n            Logger.warn(\"Trying to AdvanceStory in InkWriter when no story has been created\");\r\n        }\r\n        else if(this._currentStory.canContinue){\r\n            let text:string = this._currentStory.Continue().trim();\r\n            if(text == \"\"){\r\n                this.advanceStory();\r\n                return\r\n            }\r\n\r\n            let speakID:string;\r\n            let speakContent:string;\r\n\r\n            [speakID, speakContent] = this.extractSpeaker(text);\r\n\r\n            let commandName:string = null;\r\n            let args:string[] = null;\r\n            if(speakContent.startsWith(InkWriter.COMMAND_PREFIX)){\r\n                commandName = this.parseCommandName(speakContent);\r\n                args = this.parseCommandArgs(speakContent);\r\n                if(commandName != null && commandName !=\"\"){\r\n                    if(this.handleCommand(commandName, args)){\r\n                        this.advanceStory();\r\n                    }\r\n                }\r\n            }else{\r\n                //OnContentReady\r\n                StoryMessageManager.Instance(StoryMessageManager).broadcastContentReady(\r\n                    StoryMessageManager.ONCONTENTREADY,\r\n                    speakContent,\r\n                    speakID,\r\n                    this._currentStory.currentTags,\r\n                    this._currentStory.currentChoices\r\n                );\r\n            }\r\n        }\r\n        else if(this._currentStory.currentChoices.length > 0){\r\n            //OnChoicesPresented\r\n            StoryMessageManager.Instance(StoryMessageManager).broadcastChoicesPresented(\r\n                StoryMessageManager.ONCHOICESPRESENTED,\r\n                this._currentStory.currentChoices\r\n            );\r\n        }else{\r\n            //OnStoryFinished\r\n            StoryMessageManager.Instance(StoryMessageManager).broadcastStoryFinished(\r\n                StoryMessageManager.ONSTORYFINISHED\r\n            )\r\n        }\r\n    }\r\n\r\n    public selectChoice(choiceIndex:number):void{\r\n        if(this._currentStory == null){\r\n            Logger.warn(\"Trying to ChooseChoice in InkWriter when no story has begun\");\r\n            return;\r\n        }\r\n        this._currentStory.ChooseChoiceIndex(choiceIndex);\r\n        this.advanceStory();\r\n    }\r\n\r\n    public getVariable(variableName:string):any{\r\n        return this._currentStory.variablesState.GetVariableWithName(variableName);\r\n    }\r\n\r\n    public setVariable(variableName:string, value:any){\r\n        this._currentStory.variablesState.$(variableName, value);\r\n    }\r\n}"]}