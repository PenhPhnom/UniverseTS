{"version":3,"file":"AEntity.js","sourceRoot":"","sources":["../../../../src/framework/entity/AEntity.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,QAAQ,EAAE,MAAM,kBAAkB,CAAC;AAC5C,OAAO,EAAE,MAAM,EAAE,MAAM,kBAAkB,CAAC;AAK1C,MAAM,OAAgB,OAAO;IAA7B;QACW,SAAI,GAAU,CAAC,CAAC;QACf,cAAS,GAA+B,IAAI,GAAG,EAA0B,CAAC;QAC1E,eAAU,GAAyB,IAAI,GAAG,EAAoB,CAAC;QAEhE,WAAM,GAAW,IAAI,CAAC;QACrB,cAAS,GAA4B,IAAI,QAAQ,EAAmB,CAAC;QACrE,kBAAa,GAA+B,IAAI,GAAG,EAA0B,CAAC;IA6G1F,CAAC;IAxGU,QAAQ,CAAI,KAAa,EAAC,CAAa;QAC1C,KAAK,CAAC,MAAM,GAAG,IAAI,CAAC;QACpB,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;QAEtC,IAAI,WAAW,GAAG,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;QACjD,IAAG,WAAW,IAAI,IAAI,EAAC,CAAC;YACpB,WAAW,GAAG,IAAI,KAAK,EAAW,CAAC;YACnC,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,EAAE,WAAW,CAAC,CAAC;QAChD,CAAC;QACD,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IAC5B,CAAC;IAEM,WAAW,CAAC,KAAa;QAC5B,IAAI,MAAM,GAAG,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;QAC/C,MAAM,CAAC,OAAO,EAAE,CAAC;IACrB,CAAC;IAEM,WAAW;QACd,OAAO,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE,CAAC;IACnC,CAAC;IAEM,cAAc,CAAC,IAAW;QAC7B,OAAO,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;IACpC,CAAC;IAGM,iBAAiB,CAAoB,CAAa;QACrD,OAAO,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;IAC1C,CAAC;IAEM,cAAc,CAAoB,CAAa;QAClD,OAAO,IAAI,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACxC,CAAC;IAEO,YAAY,CAAsB,CAAa;QACnD,IAAI,EAAE,GAAG,IAAI,CAAC,EAAE,CAAC;QACjB,EAAE,CAAC,MAAM,GAAG,IAAI,CAAC;QAEjB,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC;QAC7B,OAAO,EAAE,CAAC;IACd,CAAC;IAEM,YAAY,CAAsB,CAAa;QAElD,OAAO,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;IACnC,CAAC;IAEM,iBAAiB,CAAsB,CAAa;QACvD,IAAI,GAAG,GAAG,IAAI,CAAC,YAAY,CAAI,CAAC,CAAC,CAAC;QAClC,IAAG,GAAG,IAAI,IAAI,EAAC,CAAC;YACb,GAAG,GAAG,IAAI,CAAC,YAAY,CAAI,CAAC,CAAC,CAAC;QACjC,CAAC;QACD,OAAO,GAAG,CAAC;IACf,CAAC;IAEM,OAAO,CAAI,KAAO,EAAE,CAAa;QAEpC,IAAI,KAAK,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;QACvC,IAAG,KAAK,IAAE,IAAI,IAAI,KAAK,CAAC,MAAM,IAAI,CAAC,EAAC,CAAC;YACjC,MAAM,CAAC,GAAG,CAAC,8BAA8B,CAAC,CAAA;YAC1C,OAAO;QACX,CAAC;QAED,KAAI,IAAI,CAAC,GAAC,CAAC,EAAE,CAAC,GAAC,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAC,CAAC;YAC9B,IAAI,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;YACjB,IAAG,CAAC,IAAI,IAAI;gBAAE,CAAC,CAAC,KAAK,CAAC,CAAC;QAC3B,CAAC;IAEL,CAAC;IAEM,SAAS,CAAI,MAAkB,EAAE,CAAa;QAEjD,IAAI,KAAK,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;QACvC,IAAG,KAAK,IAAI,IAAI,EAAC,CAAC;YACd,KAAK,GAAG,IAAI,KAAK,EAAY,CAAC;YAC9B,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,EAAC,KAAK,CAAC,CAAC;QACrC,CAAC;QACD,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IACvB,CAAC;IAEM,WAAW,CAAI,MAAkB,EAAE,CAAa;QAEnD,IAAI,KAAK,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;QAEvC,IAAI,KAAK,GAAG,KAAK,CAAC,OAAO,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;QACrC,IAAG,KAAK,GAAG,CAAC,CAAC,EAAC,CAAC;YACX,KAAK,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;QAC3B,CAAC;IACL,CAAC;IAGM,OAAO;QAEV,IAAI,QAAQ,GAAE,IAAI,CAAC,WAAW,CAAC;QAC/B,KAAI,IAAI,CAAC,GAAC,CAAC,EAAE,CAAC,GAAC,QAAQ,CAAC,MAAM,EAAE,CAAC,EAAE,EAAC,CAAC;YACjC,QAAQ,CAAC,CAAC,CAAC,CAAC,OAAO,EAAE,CAAC;QAC1B,CAAC;QAED,IAAI,CAAC,UAAU,CAAC,KAAK,EAAE,CAAC;QACxB,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE,CAAC;QACvB,IAAI,CAAC,aAAa,CAAC,KAAK,EAAE,CAAC;QAC3B,IAAI,CAAC,SAAS,CAAC,OAAO,EAAE,CAAC;QACzB,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;IACvB,CAAC;CACJ","sourcesContent":["import { ArrayMap } from \"../core/ArrayMap\";\r\nimport { Logger } from \"../logger/Logger\";\r\nimport { Component } from \"./Component\";\r\n\r\ntype Class<T> = new (...args: any[]) => T;\r\n\r\nexport abstract class AEntity{\r\n    public uuid:number = 0;\r\n    private eventsMap:Map<string,Array<Function>> = new Map<string,Array<Function>>();\r\n    private components:Map<string,Component> = new Map<string,Component>();\r\n\r\n    public parent:AEntity = null;\r\n    private _children:ArrayMap<number,AEntity> = new ArrayMap<number, AEntity>();\r\n    private _typeChildren:Map<string, Array<AEntity>> = new Map<string, Array<AEntity>>();\r\n\r\n    public abstract onAwake(initData:any)\r\n\r\n\r\n    public addChild<T>(child:AEntity,c: {new():T;}){\r\n        child.parent = this;\r\n        this._children.add(child.uuid, child);\r\n\r\n        let childrenArr = this._typeChildren.get(c.name);\r\n        if(childrenArr == null){\r\n            childrenArr = new Array<AEntity>();\r\n            this._typeChildren.set(c.name, childrenArr);\r\n        }\r\n        childrenArr.push(child);\r\n    }\r\n\r\n    public removeChild(child:AEntity){\r\n        let entity = this._children.remove(child.uuid);\r\n        entity.dispose();\r\n    }\r\n\r\n    public getChildren():Array<AEntity>{\r\n        return this._children.getArr();\r\n    }\r\n\r\n    public getChildByUUID(uuid:number):AEntity{\r\n        return this._children.get(uuid);\r\n    }\r\n\r\n\r\n    public getChildrenByType<T extends AEntity>(c: {new():T;}):Array<AEntity>{\r\n        return this._typeChildren.get(c.name);\r\n    }\r\n\r\n    public getChildByType<T extends AEntity>(c: {new():T;}):AEntity{\r\n        return this.getChildrenByType(c)[0];\r\n    }\r\n\r\n    public  addComponent<T extends Component>(c: {new():T;}) :T {\r\n        let cc = new c();\r\n        cc.entity = this;\r\n\r\n        this.components[c.name] = cc;\r\n        return cc;\r\n    }\r\n\r\n    public getComponent<T extends Component>(c: {new():T;}) : T {\r\n\r\n        return this.components[c.name];\r\n    }\r\n\r\n    public getOrAddComponent<T extends Component>(c: {new():T;}) : T {\r\n        let com = this.getComponent<T>(c);\r\n        if(com == null){\r\n           com = this.addComponent<T>(c);\r\n        }\r\n        return com;\r\n    }\r\n \r\n    public publish<T>(event:T, c: {new():T;}){\r\n\r\n        let array = this.eventsMap.get(c.name);\r\n        if(array==null || array.length == 0){\r\n            Logger.log(\"this event not subscribed...\")\r\n            return;\r\n        }\r\n\r\n        for(let i=0; i<array.length; i++){\r\n            let f = array[i];\r\n            if(f != null) f(event);\r\n        }\r\n     \r\n    }\r\n\r\n    public subscribe<T>(action:(t:T)=>void, c: {new():T;}){\r\n\r\n        let array = this.eventsMap.get(c.name);\r\n        if(array == null){\r\n            array = new Array<Function>();\r\n            this.eventsMap.set(c.name,array);\r\n        }\r\n        array.push(action);\r\n    }\r\n\r\n    public unSubscribe<T>(action:(t:T)=>void, c: {new():T;}){\r\n\r\n        let array = this.eventsMap.get(c.name);\r\n        \r\n        let index = array.indexOf(action, 0);\r\n        if(index > -1){\r\n            array.splice(index, 1);\r\n        }\r\n    }\r\n\r\n\r\n    public dispose(){\r\n\r\n        let children= this.getChildren;\r\n        for(let i=0; i<children.length; i++){\r\n            children[i].dispose();\r\n        }\r\n\r\n        this.components.clear();\r\n        this.eventsMap.clear();\r\n        this._typeChildren.clear();\r\n        this._children.dispose();\r\n        this.parent = null;\r\n    }\r\n}"]}