{"version":3,"file":"builder.js","sourceRoot":"","sources":["../../../../../src/libs/flatbuffer/flexbuffers/builder.ts"],"names":[],"mappings":"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","sourcesContent":["import { BitWidth } from './bit-width'\r\nimport { paddingSize, iwidth, uwidth, fwidth, toByteWidth, fromByteWidth } from './bit-width-util'\r\nimport { toUTF8Array } from './flexbuffers-util'\r\nimport { ValueType } from './value-type'\r\nimport { isNumber, isTypedVectorElement, toTypedVector } from './value-type-util'\r\nimport { StackValue } from './stack-value'\r\n\r\ninterface StackPointer {\r\n  stackPosition: number,\r\n  isVector: boolean\r\n  presorted?: boolean\r\n}\r\n\r\nexport class Builder {\r\n  buffer: ArrayBuffer\r\n  view: DataView\r\n\r\n  readonly stack: Array<StackValue> = [];\r\n  readonly stackPointers: Array<StackPointer> = [];\r\n  offset = 0;\r\n  finished = false;\r\n  readonly stringLookup: Record<string, StackValue> = {};\r\n  readonly keyLookup: Record<string, StackValue> = {};\r\n  readonly keyVectorLookup: Record<string, StackValue> = {};\r\n  readonly indirectIntLookup: Record<number, StackValue> = {};\r\n  readonly indirectUIntLookup: Record<number, StackValue> = {};\r\n  readonly indirectFloatLookup: Record<number, StackValue> = {};\r\n\r\n  constructor(size = 2048, private dedupStrings = true, private dedupKeys = true, private dedupKeyVectors = true) {\r\n    this.buffer = new ArrayBuffer(size > 0 ? size : 2048);\r\n    this.view = new DataView(this.buffer);\r\n  }\r\n\r\n  private align(width: BitWidth) {\r\n    const byteWidth = toByteWidth(width);\r\n    this.offset += paddingSize(this.offset, byteWidth);\r\n    return byteWidth;\r\n  }\r\n\r\n  computeOffset(newValueSize: number): number {\r\n    const targetOffset = this.offset + newValueSize;\r\n    let size = this.buffer.byteLength;\r\n    const prevSize = size;\r\n    while (size < targetOffset) {\r\n      size <<= 1;\r\n    }\r\n    if (prevSize < size) {\r\n      const prevBuffer = this.buffer;\r\n      this.buffer = new ArrayBuffer(size);\r\n      this.view = new DataView(this.buffer);\r\n      new Uint8Array(this.buffer).set(new Uint8Array(prevBuffer), 0);\r\n    }\r\n    return targetOffset;\r\n  }\r\n\r\n  pushInt(value: number, width: BitWidth): void {\r\n    if (width === BitWidth.WIDTH8) {\r\n      this.view.setInt8(this.offset, value);\r\n    } else if (width === BitWidth.WIDTH16) {\r\n      this.view.setInt16(this.offset, value, true);\r\n    } else if (width === BitWidth.WIDTH32) {\r\n      this.view.setInt32(this.offset, value, true);\r\n    } else if (width === BitWidth.WIDTH64) {\r\n      this.view.setBigInt64(this.offset, BigInt(value), true);\r\n    } else {\r\n      throw `Unexpected width: ${width} for value: ${value}`;\r\n    }\r\n  }\r\n\r\n  pushUInt(value: number, width: BitWidth): void {\r\n    if (width === BitWidth.WIDTH8) {\r\n      this.view.setUint8(this.offset, value);\r\n    } else if (width === BitWidth.WIDTH16) {\r\n      this.view.setUint16(this.offset, value, true);\r\n    } else if (width === BitWidth.WIDTH32) {\r\n      this.view.setUint32(this.offset, value, true);\r\n    } else if (width === BitWidth.WIDTH64) {\r\n      this.view.setBigUint64(this.offset, BigInt(value), true);\r\n    } else {\r\n      throw `Unexpected width: ${width} for value: ${value}`;\r\n    }\r\n  }\r\n\r\n  private writeInt(value: number, byteWidth: number) {\r\n    const newOffset = this.computeOffset(byteWidth);\r\n    this.pushInt(value, fromByteWidth(byteWidth));\r\n    this.offset = newOffset;\r\n  }\r\n\r\n  private writeUInt(value: number, byteWidth: number) {\r\n    const newOffset = this.computeOffset(byteWidth);\r\n    this.pushUInt(value, fromByteWidth(byteWidth));\r\n    this.offset = newOffset;\r\n  }\r\n\r\n  private writeBlob(arrayBuffer: ArrayBuffer) {\r\n    const length = arrayBuffer.byteLength;\r\n    const bitWidth = uwidth(length);\r\n    const byteWidth = this.align(bitWidth);\r\n    this.writeUInt(length, byteWidth);\r\n    const blobOffset = this.offset;\r\n    const newOffset = this.computeOffset(length);\r\n    new Uint8Array(this.buffer).set(new Uint8Array(arrayBuffer), blobOffset);\r\n    this.stack.push(this.offsetStackValue(blobOffset, ValueType.BLOB, bitWidth));\r\n    this.offset = newOffset;\r\n  }\r\n\r\n  private writeString(str: string): void {\r\n    if (this.dedupStrings && Object.prototype.hasOwnProperty.call(this.stringLookup, str)) {\r\n      this.stack.push(this.stringLookup[str]);\r\n      return;\r\n    }\r\n    const utf8 = toUTF8Array(str);\r\n    const length = utf8.length;\r\n    const bitWidth = uwidth(length);\r\n    const byteWidth = this.align(bitWidth);\r\n    this.writeUInt(length, byteWidth);\r\n    const stringOffset = this.offset;\r\n    const newOffset = this.computeOffset(length + 1);\r\n    new Uint8Array(this.buffer).set(utf8, stringOffset);\r\n    const stackValue = this.offsetStackValue(stringOffset, ValueType.STRING, bitWidth);\r\n    this.stack.push(stackValue);\r\n    if (this.dedupStrings) {\r\n      this.stringLookup[str] = stackValue;\r\n    }\r\n    this.offset = newOffset;\r\n  }\r\n\r\n  private writeKey(str: string): void {\r\n    if (this.dedupKeys && Object.prototype.hasOwnProperty.call(this.keyLookup, str)) {\r\n      this.stack.push(this.keyLookup[str]);\r\n      return;\r\n    }\r\n    const utf8 = toUTF8Array(str);\r\n    const length = utf8.length;\r\n    const newOffset = this.computeOffset(length + 1);\r\n    new Uint8Array(this.buffer).set(utf8, this.offset);\r\n    const stackValue = this.offsetStackValue(this.offset, ValueType.KEY, BitWidth.WIDTH8);\r\n    this.stack.push(stackValue);\r\n    if (this.dedupKeys) {\r\n      this.keyLookup[str] = stackValue;\r\n    }\r\n    this.offset = newOffset;\r\n  }\r\n\r\n  private writeStackValue(value: StackValue, byteWidth: number): void {\r\n    const newOffset = this.computeOffset(byteWidth);\r\n    if (value.isOffset()) {\r\n      const relativeOffset = this.offset - value.offset;\r\n      if (byteWidth === 8 || BigInt(relativeOffset) < (BigInt(1) << BigInt(byteWidth * 8))) {\r\n        this.writeUInt(relativeOffset, byteWidth);\r\n      } else {\r\n        throw `Unexpected size ${byteWidth}. This might be a bug. Please create an issue https://github.com/google/flatbuffers/issues/new`\r\n      }\r\n    } else {\r\n      value.writeToBuffer(byteWidth);\r\n    }\r\n    this.offset = newOffset;\r\n  }\r\n\r\n  private integrityCheckOnValueAddition() {\r\n    if (this.finished) {\r\n      throw \"Adding values after finish is prohibited\";\r\n    }\r\n    if (this.stackPointers.length !== 0 && this.stackPointers[this.stackPointers.length - 1].isVector === false) {\r\n      if (this.stack[this.stack.length - 1].type !== ValueType.KEY) {\r\n        throw \"Adding value to a map before adding a key is prohibited\";\r\n      }\r\n    }\r\n  }\r\n\r\n  private integrityCheckOnKeyAddition() {\r\n    if (this.finished) {\r\n      throw \"Adding values after finish is prohibited\";\r\n    }\r\n    if (this.stackPointers.length === 0 || this.stackPointers[this.stackPointers.length - 1].isVector) {\r\n      throw \"Adding key before starting a map is prohibited\";\r\n    }\r\n  }\r\n\r\n  startVector(): void {\r\n    this.stackPointers.push({ stackPosition: this.stack.length, isVector: true });\r\n  }\r\n\r\n  startMap(presorted = false): void {\r\n    this.stackPointers.push({ stackPosition: this.stack.length, isVector: false, presorted: presorted });\r\n  }\r\n\r\n  private endVector(stackPointer: StackPointer) {\r\n    const vecLength = this.stack.length - stackPointer.stackPosition;\r\n    const vec = this.createVector(stackPointer.stackPosition, vecLength, 1);\r\n    this.stack.splice(stackPointer.stackPosition, vecLength);\r\n    this.stack.push(vec);\r\n  }\r\n\r\n  private endMap(stackPointer: StackPointer) {\r\n    if (!stackPointer.presorted) {\r\n      this.sort(stackPointer);\r\n    }\r\n    let keyVectorHash = \"\";\r\n    for (let i = stackPointer.stackPosition; i < this.stack.length; i += 2) {\r\n      keyVectorHash += `,${this.stack[i].offset}`;\r\n    }\r\n    const vecLength = (this.stack.length - stackPointer.stackPosition) >> 1;\r\n\r\n    if (this.dedupKeyVectors && !Object.prototype.hasOwnProperty.call(this.keyVectorLookup, keyVectorHash)) {\r\n      this.keyVectorLookup[keyVectorHash] = this.createVector(stackPointer.stackPosition, vecLength, 2);\r\n    }\r\n    const keysStackValue = this.dedupKeyVectors ? this.keyVectorLookup[keyVectorHash] : this.createVector(stackPointer.stackPosition, vecLength, 2);\r\n    const valuesStackValue = this.createVector(stackPointer.stackPosition + 1, vecLength, 2, keysStackValue);\r\n    this.stack.splice(stackPointer.stackPosition, vecLength << 1);\r\n    this.stack.push(valuesStackValue);\r\n  }\r\n\r\n  private sort(stackPointer: StackPointer) {\r\n    const view = this.view\r\n    const stack = this.stack\r\n\r\n    function shouldFlip(v1: StackValue, v2: StackValue) {\r\n      if (v1.type !== ValueType.KEY || v2.type !== ValueType.KEY) {\r\n        throw `Stack values are not keys ${v1} | ${v2}. Check if you combined [addKey] with add... method calls properly.`\r\n      }\r\n      let c1, c2;\r\n      let index = 0;\r\n      do {\r\n        c1 = view.getUint8(v1.offset + index);\r\n        c2 = view.getUint8(v2.offset + index);\r\n        if (c2 < c1) return true;\r\n        if (c1 < c2) return false;\r\n        index += 1;\r\n      } while (c1 !== 0 && c2 !== 0);\r\n      return false;\r\n    }\r\n\r\n    function swap(stack: Array<StackValue>, flipIndex: number, i: number) {\r\n      if (flipIndex === i) return;\r\n      const k = stack[flipIndex];\r\n      const v = stack[flipIndex + 1];\r\n      stack[flipIndex] = stack[i];\r\n      stack[flipIndex + 1] = stack[i + 1];\r\n      stack[i] = k;\r\n      stack[i + 1] = v;\r\n    }\r\n\r\n    function selectionSort() {\r\n      for (let i = stackPointer.stackPosition; i < stack.length; i += 2) {\r\n        let flipIndex = i;\r\n        for (let j = i + 2; j < stack.length; j += 2) {\r\n          if (shouldFlip(stack[flipIndex], stack[j])) {\r\n            flipIndex = j;\r\n          }\r\n        }\r\n        if (flipIndex !== i) {\r\n          swap(stack, flipIndex, i);\r\n        }\r\n      }\r\n    }\r\n\r\n    function smaller(v1: StackValue, v2: StackValue) {\r\n      if (v1.type !== ValueType.KEY || v2.type !== ValueType.KEY) {\r\n        throw `Stack values are not keys ${v1} | ${v2}. Check if you combined [addKey] with add... method calls properly.`\r\n      }\r\n      if (v1.offset === v2.offset) {\r\n        return false;\r\n      }\r\n      let c1, c2;\r\n      let index = 0;\r\n      do {\r\n        c1 = view.getUint8(v1.offset + index);\r\n        c2 = view.getUint8(v2.offset + index);\r\n        if (c1 < c2) return true;\r\n        if (c2 < c1) return false;\r\n        index += 1;\r\n      } while (c1 !== 0 && c2 !== 0);\r\n      return false;\r\n    }\r\n\r\n    function quickSort(left: number, right: number) {\r\n\r\n      if (left < right) {\r\n        const mid = left + (((right - left) >> 2)) * 2;\r\n        const pivot = stack[mid];\r\n        let left_new = left;\r\n        let right_new = right;\r\n\r\n        do {\r\n          while (smaller(stack[left_new], pivot)) {\r\n            left_new += 2;\r\n          }\r\n          while (smaller(pivot, stack[right_new])) {\r\n            right_new -= 2;\r\n          }\r\n          if (left_new <= right_new) {\r\n            swap(stack, left_new, right_new);\r\n            left_new += 2;\r\n            right_new -= 2;\r\n          }\r\n        } while (left_new <= right_new);\r\n\r\n        quickSort(left, right_new);\r\n        quickSort(left_new, right);\r\n\r\n      }\r\n    }\r\n\r\n    let sorted = true;\r\n    for (let i = stackPointer.stackPosition; i < this.stack.length - 2; i += 2) {\r\n      if (shouldFlip(this.stack[i], this.stack[i + 2])) {\r\n        sorted = false;\r\n        break;\r\n      }\r\n    }\r\n\r\n    if (!sorted) {\r\n      if (this.stack.length - stackPointer.stackPosition > 40) {\r\n        quickSort(stackPointer.stackPosition, this.stack.length - 2);\r\n      } else {\r\n        selectionSort();\r\n      }\r\n    }\r\n  }\r\n\r\n  end(): void {\r\n    if (this.stackPointers.length < 1) return;\r\n    const pointer = this.stackPointers.pop() as StackPointer;\r\n    if (pointer.isVector) {\r\n      this.endVector(pointer);\r\n    } else {\r\n      this.endMap(pointer);\r\n    }\r\n  }\r\n\r\n  private createVector(start: number, vecLength: number, step: number, keys: StackValue | null = null) {\r\n    let bitWidth = uwidth(vecLength);\r\n    let prefixElements = 1;\r\n    if (keys !== null) {\r\n      const elementWidth = keys.elementWidth(this.offset, 0);\r\n      if (elementWidth > bitWidth) {\r\n        bitWidth = elementWidth;\r\n      }\r\n      prefixElements += 2;\r\n    }\r\n    let vectorType = ValueType.KEY;\r\n    let typed = keys === null;\r\n    for (let i = start; i < this.stack.length; i += step) {\r\n      const elementWidth = this.stack[i].elementWidth(this.offset, i + prefixElements);\r\n      if (elementWidth > bitWidth) {\r\n        bitWidth = elementWidth;\r\n      }\r\n      if (i === start) {\r\n        vectorType = this.stack[i].type;\r\n        typed = typed && isTypedVectorElement(vectorType);\r\n      } else {\r\n        if (vectorType !== this.stack[i].type) {\r\n          typed = false;\r\n        }\r\n      }\r\n    }\r\n    const byteWidth = this.align(bitWidth);\r\n    const fix = typed && isNumber(vectorType) && vecLength >= 2 && vecLength <= 4;\r\n    if (keys !== null) {\r\n      this.writeStackValue(keys, byteWidth);\r\n      this.writeUInt(1 << keys.width, byteWidth);\r\n    }\r\n    if (!fix) {\r\n      this.writeUInt(vecLength, byteWidth);\r\n    }\r\n    const vecOffset = this.offset;\r\n    for (let i = start; i < this.stack.length; i += step) {\r\n      this.writeStackValue(this.stack[i], byteWidth);\r\n    }\r\n    if (!typed) {\r\n      for (let i = start; i < this.stack.length; i += step) {\r\n        this.writeUInt(this.stack[i].storedPackedType(), 1);\r\n      }\r\n    }\r\n    if (keys !== null) {\r\n      return this.offsetStackValue(vecOffset, ValueType.MAP, bitWidth);\r\n    }\r\n    if (typed) {\r\n      const vType = toTypedVector(vectorType, fix ? vecLength : 0);\r\n      return this.offsetStackValue(vecOffset, vType, bitWidth);\r\n    }\r\n    return this.offsetStackValue(vecOffset, ValueType.VECTOR, bitWidth);\r\n  }\r\n\r\n  private nullStackValue() {\r\n    return new StackValue(this, ValueType.NULL, BitWidth.WIDTH8);\r\n  }\r\n\r\n  private boolStackValue(value: boolean) {\r\n    return new StackValue(this, ValueType.BOOL, BitWidth.WIDTH8, value);\r\n  }\r\n\r\n  private intStackValue(value: number | bigint) {\r\n    return new StackValue(this, ValueType.INT, iwidth(value), value as number);\r\n  }\r\n\r\n  private uintStackValue(value: number) {\r\n    return new StackValue(this, ValueType.UINT, uwidth(value), value);\r\n  }\r\n\r\n  private floatStackValue(value: number) {\r\n    return new StackValue(this, ValueType.FLOAT, fwidth(value), value);\r\n  }\r\n\r\n  private offsetStackValue(offset: number, valueType: ValueType, bitWidth: BitWidth): StackValue {\r\n    return new StackValue(this, valueType, bitWidth, null, offset);\r\n  }\r\n\r\n  private finishBuffer() {\r\n    if (this.stack.length !== 1) {\r\n      throw `Stack has to be exactly 1, but it is ${this.stack.length}. You have to end all started vectors and maps before calling [finish]`;\r\n    }\r\n    const value = this.stack[0];\r\n    const byteWidth = this.align(value.elementWidth(this.offset, 0));\r\n    this.writeStackValue(value, byteWidth);\r\n    this.writeUInt(value.storedPackedType(), 1);\r\n    this.writeUInt(byteWidth, 1);\r\n    this.finished = true;\r\n  }\r\n\r\n  add(value: undefined | null | boolean | bigint | number | DataView | string | Array<unknown> | Record<string, unknown> | unknown): void {\r\n    this.integrityCheckOnValueAddition();\r\n    if (typeof value === 'undefined') {\r\n      throw \"You need to provide a value\";\r\n    }\r\n    if (value === null) {\r\n      this.stack.push(this.nullStackValue());\r\n    } else if (typeof value === \"boolean\") {\r\n      this.stack.push(this.boolStackValue(value));\r\n    } else if (typeof value === \"bigint\") {\r\n      this.stack.push(this.intStackValue(value));\r\n    } else if (typeof value == 'number') {\r\n      if (Number.isInteger(value)) {\r\n        this.stack.push(this.intStackValue(value));\r\n      } else {\r\n        this.stack.push(this.floatStackValue(value));\r\n      }\r\n    } else if (ArrayBuffer.isView(value)) {\r\n      this.writeBlob(value.buffer);\r\n    } else if (typeof value === 'string' || value instanceof String) {\r\n      this.writeString(value as string);\r\n    } else if (Array.isArray(value)) {\r\n      this.startVector();\r\n      for (let i = 0; i < value.length; i++) {\r\n        this.add(value[i]);\r\n      }\r\n      this.end();\r\n    } else if (typeof value === 'object') {\r\n      const properties = Object.getOwnPropertyNames(value).sort();\r\n      this.startMap(true);\r\n      for (let i = 0; i < properties.length; i++) {\r\n        const key = properties[i];\r\n        this.addKey(key);\r\n        this.add((value as Record<string, unknown>)[key]);\r\n      }\r\n      this.end();\r\n    } else {\r\n      throw `Unexpected value input ${value}`;\r\n    }\r\n  }\r\n\r\n  finish(): Uint8Array {\r\n    if (!this.finished) {\r\n      this.finishBuffer();\r\n    }\r\n    const result = this.buffer.slice(0, this.offset);\r\n    return new Uint8Array(result);\r\n  }\r\n\r\n  isFinished(): boolean {\r\n    return this.finished;\r\n  }\r\n\r\n  addKey(key: string): void {\r\n    this.integrityCheckOnKeyAddition();\r\n    this.writeKey(key);\r\n  }\r\n\r\n  addInt(value: number, indirect = false, deduplicate = false): void {\r\n    this.integrityCheckOnValueAddition();\r\n    if (!indirect) {\r\n      this.stack.push(this.intStackValue(value));\r\n      return;\r\n    }\r\n    if (deduplicate && Object.prototype.hasOwnProperty.call(this.indirectIntLookup, value)) {\r\n      this.stack.push(this.indirectIntLookup[value]);\r\n      return;\r\n    }\r\n    const stackValue = this.intStackValue(value);\r\n    const byteWidth = this.align(stackValue.width);\r\n    const newOffset = this.computeOffset(byteWidth);\r\n    const valueOffset = this.offset;\r\n    stackValue.writeToBuffer(byteWidth);\r\n    const stackOffset = this.offsetStackValue(valueOffset, ValueType.INDIRECT_INT, stackValue.width);\r\n    this.stack.push(stackOffset);\r\n    this.offset = newOffset;\r\n    if (deduplicate) {\r\n      this.indirectIntLookup[value] = stackOffset;\r\n    }\r\n  }\r\n\r\n  addUInt(value: number, indirect = false, deduplicate = false): void {\r\n    this.integrityCheckOnValueAddition();\r\n    if (!indirect) {\r\n      this.stack.push(this.uintStackValue(value));\r\n      return;\r\n    }\r\n    if (deduplicate && Object.prototype.hasOwnProperty.call(this.indirectUIntLookup, value)) {\r\n      this.stack.push(this.indirectUIntLookup[value]);\r\n      return;\r\n    }\r\n    const stackValue = this.uintStackValue(value);\r\n    const byteWidth = this.align(stackValue.width);\r\n    const newOffset = this.computeOffset(byteWidth);\r\n    const valueOffset = this.offset;\r\n    stackValue.writeToBuffer(byteWidth);\r\n    const stackOffset = this.offsetStackValue(valueOffset, ValueType.INDIRECT_UINT, stackValue.width);\r\n    this.stack.push(stackOffset);\r\n    this.offset = newOffset;\r\n    if (deduplicate) {\r\n      this.indirectUIntLookup[value] = stackOffset;\r\n    }\r\n  }\r\n\r\n  addFloat(value: number, indirect = false, deduplicate = false): void {\r\n    this.integrityCheckOnValueAddition();\r\n    if (!indirect) {\r\n      this.stack.push(this.floatStackValue(value));\r\n      return;\r\n    }\r\n    if (deduplicate && Object.prototype.hasOwnProperty.call(this.indirectFloatLookup, value)) {\r\n      this.stack.push(this.indirectFloatLookup[value]);\r\n      return;\r\n    }\r\n    const stackValue = this.floatStackValue(value);\r\n    const byteWidth = this.align(stackValue.width);\r\n    const newOffset = this.computeOffset(byteWidth);\r\n    const valueOffset = this.offset;\r\n    stackValue.writeToBuffer(byteWidth);\r\n    const stackOffset = this.offsetStackValue(valueOffset, ValueType.INDIRECT_FLOAT, stackValue.width);\r\n    this.stack.push(stackOffset);\r\n    this.offset = newOffset;\r\n    if (deduplicate) {\r\n      this.indirectFloatLookup[value] = stackOffset;\r\n    }\r\n  }\r\n}\r\n"]}