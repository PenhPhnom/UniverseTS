{"version":3,"file":"reference.js","sourceRoot":"","sources":["../../../../../src/libs/flatbuffer/flexbuffers/reference.ts"],"names":[],"mappings":"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","sourcesContent":["import { fromByteWidth } from './bit-width-util'\r\nimport { ValueType } from './value-type'\r\nimport { isNumber, isIndirectNumber, isAVector, fixedTypedVectorElementSize, isFixedTypedVector, isTypedVector, typedVectorElementType, packedType, fixedTypedVectorElementType } from './value-type-util'\r\nimport { indirect, keyForIndex, keyIndex, readFloat, readInt, readUInt, valueForIndexWithKey } from './reference-util'\r\nimport { Long } from '../long';\r\nimport { fromUTF8Array } from './flexbuffers-util';\r\nimport { BitWidth } from './bit-width';\r\n\r\nexport function toReference(buffer: Uint8Array): Reference {\r\n  const len = buffer.byteLength;\r\n  \r\n  if (len < 3) {\r\n    throw \"Buffer needs to be bigger than 3\";\r\n  }\r\n\r\n  const dataView = new DataView(buffer);\r\n  const byteWidth = dataView.getUint8(len - 1);\r\n  const packedType = dataView.getUint8(len - 2);\r\n  const parentWidth = fromByteWidth(byteWidth);\r\n  const offset = len - byteWidth - 2;\r\n\r\n  return new Reference(dataView, offset, parentWidth, packedType, \"/\")\r\n}\r\n\r\nexport class Reference {\r\n  private readonly byteWidth: number\r\n  private readonly valueType: ValueType\r\n  private _length = -1\r\n  constructor(private dataView: DataView, private offset: number, private parentWidth: number, private packedType: ValueType, private path: string) {\r\n    this.byteWidth = 1 << (packedType & 3)\r\n    this.valueType = packedType >> 2\r\n  }\r\n\r\n  isNull(): boolean { return this.valueType === ValueType.NULL; }\r\n  isNumber(): boolean { return isNumber(this.valueType) || isIndirectNumber(this.valueType); }\r\n  isFloat(): boolean { return ValueType.FLOAT === this.valueType || ValueType.INDIRECT_FLOAT === this.valueType; }\r\n  isInt(): boolean { return this.isNumber() && !this.isFloat(); }\r\n  isString(): boolean { return ValueType.STRING === this.valueType || ValueType.KEY === this.valueType; }\r\n  isBool(): boolean { return ValueType.BOOL === this.valueType; }\r\n  isBlob(): boolean { return ValueType.BLOB === this.valueType; }\r\n  isVector(): boolean { return isAVector(this.valueType); }\r\n  isMap(): boolean { return ValueType.MAP === this.valueType; }\r\n\r\n  boolValue(): boolean | null {\r\n    if (this.isBool()) {\r\n      return readInt(this.dataView, this.offset, this.parentWidth) > 0;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  intValue(): number | Long | bigint | null {\r\n    if (this.valueType === ValueType.INT) {\r\n      return readInt(this.dataView, this.offset, this.parentWidth);\r\n    }\r\n    if (this.valueType === ValueType.UINT) {\r\n      return readUInt(this.dataView, this.offset, this.parentWidth);\r\n    }\r\n    if (this.valueType === ValueType.INDIRECT_INT) {\r\n      return readInt(this.dataView, indirect(this.dataView, this.offset, this.parentWidth), fromByteWidth(this.byteWidth));\r\n    }\r\n    if (this.valueType === ValueType.INDIRECT_UINT) {\r\n      return readUInt(this.dataView, indirect(this.dataView, this.offset, this.parentWidth), fromByteWidth(this.byteWidth));\r\n    }\r\n    return null;\r\n  }\r\n\r\n  floatValue(): number | null {\r\n    if (this.valueType === ValueType.FLOAT) {\r\n      return readFloat(this.dataView, this.offset, this.parentWidth);\r\n    }\r\n    if (this.valueType === ValueType.INDIRECT_FLOAT) {\r\n      return readFloat(this.dataView, indirect(this.dataView, this.offset, this.parentWidth), fromByteWidth(this.byteWidth));\r\n    }\r\n    return null;\r\n  }\r\n\r\n  numericValue(): number | Long | bigint | null { return this.floatValue() || this.intValue()}\r\n\r\n  stringValue(): string | null {\r\n    if (this.valueType === ValueType.STRING || this.valueType === ValueType.KEY) {\r\n      const begin = indirect(this.dataView, this.offset, this.parentWidth);\r\n      return fromUTF8Array(new Uint8Array(this.dataView.buffer, begin, this.length()));\r\n    }\r\n    return null;\r\n  }\r\n\r\n  blobValue(): Uint8Array | null {\r\n    if (this.isBlob()) {\r\n      const begin = indirect(this.dataView, this.offset, this.parentWidth);\r\n      return new Uint8Array(this.dataView.buffer, begin, this.length());\r\n    }\r\n    return null;\r\n  }\r\n\r\n  get(key: number): Reference {\r\n    const length = this.length();\r\n    if (Number.isInteger(key) && isAVector(this.valueType)) {\r\n      if (key >= length || key < 0) {\r\n        throw `Key: [${key}] is not applicable on ${this.path} of ${this.valueType} length: ${length}`;\r\n      }\r\n      const _indirect = indirect(this.dataView, this.offset, this.parentWidth);\r\n      const elementOffset = _indirect + key * this.byteWidth;\r\n      let _packedType = this.dataView.getUint8(_indirect + length * this.byteWidth + key);\r\n      if (isTypedVector(this.valueType)) {\r\n        const _valueType = typedVectorElementType(this.valueType);\r\n        _packedType = packedType(_valueType, BitWidth.WIDTH8);\r\n      } else if (isFixedTypedVector(this.valueType)) {\r\n        const _valueType = fixedTypedVectorElementType(this.valueType);\r\n        _packedType = packedType(_valueType, BitWidth.WIDTH8);\r\n      }\r\n      return new Reference(this.dataView, elementOffset, fromByteWidth(this.byteWidth), _packedType, `${this.path}[${key}]`);\r\n    }\r\n    if (typeof key === 'string') {\r\n      const index = keyIndex(key, this.dataView, this.offset, this.parentWidth, this.byteWidth, length);\r\n      if (index !== null) {\r\n        return valueForIndexWithKey(index, key, this.dataView, this.offset, this.parentWidth, this.byteWidth, length, this.path)\r\n      }\r\n    }\r\n    throw `Key [${key}] is not applicable on ${this.path} of ${this.valueType}`;\r\n  }\r\n\r\n  length(): number {\r\n    let size;\r\n    if (this._length > -1) {\r\n      return this._length;\r\n    }\r\n    if (isFixedTypedVector(this.valueType)) {\r\n      this._length = fixedTypedVectorElementSize(this.valueType);\r\n    } else if (this.valueType === ValueType.BLOB\r\n      || this.valueType === ValueType.MAP\r\n      || isAVector(this.valueType)) {\r\n      this._length = readUInt(this.dataView, indirect(this.dataView, this.offset, this.parentWidth) - this.byteWidth, fromByteWidth(this.byteWidth)) as number\r\n    } else if (this.valueType === ValueType.NULL) {\r\n      this._length = 0;\r\n    } else if (this.valueType === ValueType.STRING) {\r\n      const _indirect = indirect(this.dataView, this.offset, this.parentWidth);\r\n      let sizeByteWidth = this.byteWidth;\r\n      size = readUInt(this.dataView, _indirect - sizeByteWidth, fromByteWidth(this.byteWidth));\r\n      while (this.dataView.getInt8(_indirect + (size as number)) !== 0) {\r\n        sizeByteWidth <<= 1;\r\n        size = readUInt(this.dataView, _indirect - sizeByteWidth, fromByteWidth(this.byteWidth));\r\n      }\r\n      this._length = size as number;\r\n    } else if (this.valueType === ValueType.KEY) {\r\n      const _indirect = indirect(this.dataView, this.offset, this.parentWidth);\r\n      size = 1;\r\n      while (this.dataView.getInt8(_indirect + size) !== 0) {\r\n        size++;\r\n      }\r\n      this._length = size;\r\n    } else {\r\n      this._length = 1;\r\n    }\r\n    return this._length;\r\n  }\r\n\r\n  toObject(): unknown {\r\n    const length = this.length();\r\n    if (this.isVector()) {\r\n      const result = [];\r\n      for (let i = 0; i < length; i++) {\r\n        result.push(this.get(i).toObject());\r\n      }\r\n      return result;\r\n    }\r\n    if (this.isMap()) {\r\n      const result: Record<string, unknown> = {};\r\n      for (let i = 0; i < length; i++) {\r\n        const key = keyForIndex(i, this.dataView, this.offset, this.parentWidth, this.byteWidth);\r\n        result[key] = valueForIndexWithKey(i, key, this.dataView, this.offset, this.parentWidth, this.byteWidth, length, this.path).toObject();\r\n      }\r\n      return result;\r\n    }\r\n    if (this.isNull()) {\r\n      return null;\r\n    }\r\n    if (this.isBool()) {\r\n      return this.boolValue();\r\n    }\r\n    if (this.isNumber()) {\r\n      return this.numericValue();\r\n    }\r\n    return this.blobValue() || this.stringValue();\r\n  }\r\n}\r\n"]}