{"version":3,"file":"bit-width-util.js","sourceRoot":"","sources":["../../../../../src/libs/flatbuffer/flexbuffers/bit-width-util.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,QAAQ,EAAE,MAAM,aAAa,CAAA;AAEtC,MAAM,UAAU,WAAW,CAAC,QAAkB;IAC5C,OAAO,CAAC,IAAI,QAAQ,CAAC;AACvB,CAAC;AAED,MAAM,UAAU,MAAM,CAAC,KAAsB;IAC3C,IAAI,KAAK,IAAI,CAAC,GAAG,IAAI,KAAK,IAAI,GAAG;QAAE,OAAO,QAAQ,CAAC,MAAM,CAAC;IAC1D,IAAI,KAAK,IAAI,CAAC,KAAK,IAAI,KAAK,IAAI,KAAK;QAAE,OAAO,QAAQ,CAAC,OAAO,CAAC;IAC/D,IAAI,KAAK,IAAI,CAAC,UAAU,IAAI,KAAK,IAAI,UAAU;QAAE,OAAO,QAAQ,CAAC,OAAO,CAAC;IACzE,OAAO,QAAQ,CAAC,OAAO,CAAC;AAC1B,CAAC;AAED,MAAM,UAAU,MAAM,CAAC,KAAa;IAClC,OAAO,KAAK,KAAK,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC,QAAQ,CAAC,OAAO,CAAC;AAC5E,CAAC;AAED,MAAM,UAAU,MAAM,CAAC,KAAa;IAClC,IAAI,KAAK,IAAI,GAAG;QAAE,OAAO,QAAQ,CAAC,MAAM,CAAC;IACzC,IAAI,KAAK,IAAI,KAAK;QAAE,OAAO,QAAQ,CAAC,OAAO,CAAC;IAC5C,IAAI,KAAK,IAAI,UAAU;QAAE,OAAO,QAAQ,CAAC,OAAO,CAAC;IACjD,OAAO,QAAQ,CAAC,OAAO,CAAC;AAC1B,CAAC;AAED,MAAM,UAAU,aAAa,CAAC,KAAa;IACzC,IAAI,KAAK,KAAK,CAAC;QAAE,OAAO,QAAQ,CAAC,MAAM,CAAC;IACxC,IAAI,KAAK,KAAK,CAAC;QAAE,OAAO,QAAQ,CAAC,OAAO,CAAC;IACzC,IAAI,KAAK,KAAK,CAAC;QAAE,OAAO,QAAQ,CAAC,OAAO,CAAC;IACzC,OAAO,QAAQ,CAAC,OAAO,CAAC;AAC1B,CAAC;AAED,MAAM,UAAU,WAAW,CAAC,OAAe,EAAE,UAAkB;IAC7D,OAAO,CAAC,CAAC,OAAO,GAAG,CAAC,CAAC,GAAG,CAAC,UAAU,GAAG,CAAC,CAAC,CAAC;AAC3C,CAAC","sourcesContent":["import { BitWidth } from './bit-width'\r\n\r\nexport function toByteWidth(bitWidth: BitWidth): number {\r\n  return 1 << bitWidth;\r\n}\r\n\r\nexport function iwidth(value: number | bigint): BitWidth {\r\n  if (value >= -128 && value <= 127) return BitWidth.WIDTH8;\r\n  if (value >= -32768 && value <= 32767) return BitWidth.WIDTH16;\r\n  if (value >= -2147483648 && value <= 2147483647) return BitWidth.WIDTH32;\r\n  return BitWidth.WIDTH64;\r\n}\r\n\r\nexport function fwidth(value: number): BitWidth {\r\n  return value === Math.fround(value) ? BitWidth.WIDTH32 : BitWidth.WIDTH64;\r\n}\r\n\r\nexport function uwidth(value: number): BitWidth {\r\n  if (value <= 255) return BitWidth.WIDTH8;\r\n  if (value <= 65535) return BitWidth.WIDTH16;\r\n  if (value <= 4294967295) return BitWidth.WIDTH32;\r\n  return BitWidth.WIDTH64;\r\n}\r\n\r\nexport function fromByteWidth(value: number): BitWidth {\r\n  if (value === 1) return BitWidth.WIDTH8;\r\n  if (value === 2) return BitWidth.WIDTH16;\r\n  if (value === 4) return BitWidth.WIDTH32;\r\n  return BitWidth.WIDTH64;\r\n}\r\n\r\nexport function paddingSize(bufSize: number, scalarSize: number): number {\r\n  return (~bufSize + 1) & (scalarSize - 1);\r\n}"]}