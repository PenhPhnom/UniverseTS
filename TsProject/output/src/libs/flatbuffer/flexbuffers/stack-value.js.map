{"version":3,"file":"stack-value.js","sourceRoot":"","sources":["../../../../../src/libs/flatbuffer/flexbuffers/stack-value.ts"],"names":[],"mappings":"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","sourcesContent":["import { Builder } from './builder'\r\nimport { BitWidth } from './bit-width'\r\nimport { paddingSize, uwidth, fromByteWidth } from './bit-width-util'\r\nimport { ValueType } from './value-type'\r\nimport { isInline, packedType } from './value-type-util'\r\n\r\nexport class StackValue {\r\n  constructor(private builder: Builder, public type: ValueType, public width: number, public value: number | boolean | null = null, public offset: number = 0) {\r\n\r\n  }\r\n\r\n  elementWidth(size: number, index: number): BitWidth {\r\n    if (isInline(this.type)) return this.width;\r\n    for (let i = 0; i < 4; i++) {\r\n      const width = 1 << i;\r\n      const offsetLoc = size + paddingSize(size, width) + index * width;\r\n      const offset = offsetLoc - this.offset;\r\n      const bitWidth = uwidth(offset);\r\n      if (1 << bitWidth === width) {\r\n        return bitWidth;\r\n      }\r\n    }\r\n    throw `Element is unknown. Size: ${size} at index: ${index}. This might be a bug. Please create an issue https://github.com/google/flatbuffers/issues/new`;\r\n  }\r\n\r\n  writeToBuffer(byteWidth: number): void {\r\n    const newOffset = this.builder.computeOffset(byteWidth);\r\n    if (this.type === ValueType.FLOAT) {\r\n      if (this.width === BitWidth.WIDTH32) {\r\n        this.builder.view.setFloat32(this.builder.offset, this.value as number, true);\r\n      } else {\r\n        this.builder.view.setFloat64(this.builder.offset, this.value as number, true);\r\n      }\r\n    } else if (this.type === ValueType.INT) {\r\n      const bitWidth = fromByteWidth(byteWidth);\r\n      this.builder.pushInt(this.value as number, bitWidth);\r\n    } else if (this.type === ValueType.UINT) {\r\n      const bitWidth = fromByteWidth(byteWidth);\r\n      this.builder.pushUInt(this.value as number, bitWidth);\r\n    } else if (this.type === ValueType.NULL) {\r\n      this.builder.pushInt(0, this.width);\r\n    } else if (this.type === ValueType.BOOL) {\r\n      this.builder.pushInt(this.value ? 1 : 0, this.width);\r\n    } else {\r\n      throw `Unexpected type: ${this.type}. This might be a bug. Please create an issue https://github.com/google/flatbuffers/issues/new`\r\n    }\r\n    this.offset = newOffset;\r\n  }\r\n\r\n  storedWidth(width = BitWidth.WIDTH8): BitWidth {\r\n    return isInline(this.type) ? Math.max(width, this.width) : this.width;\r\n  }\r\n\r\n  storedPackedType(width = BitWidth.WIDTH8): ValueType {\r\n    return packedType(this.type, this.storedWidth(width));\r\n  }\r\n\r\n  isOffset(): boolean {\r\n    return !isInline(this.type)\r\n  }\r\n}"]}