{"version":3,"file":"reference-util.js","sourceRoot":"","sources":["../../../../../src/libs/flatbuffer/flexbuffers/reference-util.ts"],"names":[],"mappings":"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","sourcesContent":["import { BitWidth } from './bit-width'\r\nimport { toByteWidth, fromByteWidth } from './bit-width-util'\r\nimport { toUTF8Array, fromUTF8Array } from './flexbuffers-util'\r\nimport { Reference } from './reference'\r\n\r\nimport { Long } from '../long'\r\n\r\nexport function validateOffset(dataView: DataView, offset: number, width: number): void {\r\n  if (dataView.byteLength <= offset + width || (offset & (toByteWidth(width) - 1)) !== 0) {\r\n    throw \"Bad offset: \" + offset + \", width: \" + width;\r\n  }\r\n}\r\n\r\nexport function readInt(dataView: DataView, offset: number, width: number): number | Long | bigint {\r\n  if (width < 2) {\r\n    if (width < 1) {\r\n      return dataView.getInt8(offset);\r\n    } else {\r\n      return dataView.getInt16(offset, true);\r\n    }\r\n  } else {\r\n    if (width < 3) {\r\n      return dataView.getInt32(offset, true)\r\n    } else {\r\n      if (dataView.setBigInt64 === undefined) {\r\n        return new Long(dataView.getUint32(offset, true), dataView.getUint32(offset + 4, true))\r\n      }\r\n      return dataView.getBigInt64(offset, true)\r\n    }\r\n  }\r\n}\r\n\r\nexport function readUInt(dataView: DataView, offset: number, width: number): number | Long | bigint {\r\n  if (width < 2) {\r\n    if (width < 1) {\r\n      return dataView.getUint8(offset);\r\n    } else {\r\n      return dataView.getUint16(offset, true);\r\n    }\r\n  } else {\r\n    if (width < 3) {\r\n      return dataView.getUint32(offset, true)\r\n    } else {\r\n      if (dataView.getBigUint64 === undefined) {\r\n        return new Long(dataView.getUint32(offset, true), dataView.getUint32(offset + 4, true))\r\n      }\r\n      return dataView.getBigUint64(offset, true)\r\n    }\r\n  }\r\n}\r\n\r\nexport function readFloat(dataView: DataView, offset: number, width: number): number {\r\n  if (width < BitWidth.WIDTH32) {\r\n    throw \"Bad width: \" + width;\r\n  }\r\n  if (width === BitWidth.WIDTH32) {\r\n    return dataView.getFloat32(offset, true);\r\n  }\r\n  return dataView.getFloat64(offset, true);\r\n}\r\n\r\nexport function indirect(dataView: DataView, offset: number, width: number): number {\r\n  const step = readUInt(dataView, offset, width) as number;\r\n  return offset - step;\r\n}\r\n\r\nexport function keyIndex(key: string, dataView: DataView, offset: number, parentWidth: number, byteWidth: number, length: number): number | null {\r\n  const input = toUTF8Array(key);\r\n  const keysVectorOffset = indirect(dataView, offset, parentWidth) - byteWidth * 3;\r\n  const bitWidth = fromByteWidth(byteWidth);\r\n  const indirectOffset = keysVectorOffset - (readUInt(dataView, keysVectorOffset, bitWidth) as number);\r\n  const _byteWidth = readUInt(dataView, keysVectorOffset + byteWidth, bitWidth) as number;\r\n  let low = 0;\r\n  let high = length - 1;\r\n  while (low <= high) {\r\n    const mid = (high + low) >> 1;\r\n    const dif = diffKeys(input, mid, dataView, indirectOffset, _byteWidth);\r\n    if (dif === 0) return mid;\r\n    if (dif < 0) {\r\n      high = mid - 1;\r\n    } else {\r\n      low = mid + 1;\r\n    }\r\n  }\r\n  return null;\r\n}\r\n\r\nexport function diffKeys(input: Uint8Array, index: number, dataView: DataView, offset: number, width: number): number {\r\n  const keyOffset = offset + index * width;\r\n  const keyIndirectOffset = keyOffset - (readUInt(dataView, keyOffset, fromByteWidth(width)) as number);\r\n  for (let i = 0; i < input.length; i++) {\r\n    const dif = input[i] - dataView.getUint8(keyIndirectOffset + i);\r\n    if (dif !== 0) {\r\n      return dif;\r\n    }\r\n  }\r\n  return dataView.getUint8(keyIndirectOffset + input.length) === 0 ? 0 : -1;\r\n}\r\n\r\nexport function valueForIndexWithKey(index: number, key: string, dataView: DataView, offset: number, parentWidth: number, byteWidth: number, length: number, path: string): Reference {\r\n  const _indirect = indirect(dataView, offset, parentWidth);\r\n  const elementOffset = _indirect + index * byteWidth;\r\n  const packedType = dataView.getUint8(_indirect + length * byteWidth + index);\r\n  return new Reference(dataView, elementOffset, fromByteWidth(byteWidth), packedType, `${path}/${key}`)\r\n}\r\n\r\nexport function keyForIndex(index: number, dataView: DataView, offset: number, parentWidth: number, byteWidth: number): string {\r\n  const keysVectorOffset = indirect(dataView, offset, parentWidth) - byteWidth * 3;\r\n  const bitWidth = fromByteWidth(byteWidth);\r\n  const indirectOffset = keysVectorOffset - (readUInt(dataView, keysVectorOffset, bitWidth) as number);\r\n  const _byteWidth = readUInt(dataView, keysVectorOffset + byteWidth, bitWidth) as number;\r\n  const keyOffset = indirectOffset + index * _byteWidth;\r\n  const keyIndirectOffset = keyOffset - (readUInt(dataView, keyOffset, fromByteWidth(_byteWidth)) as number);\r\n  let length = 0;\r\n  while (dataView.getUint8(keyIndirectOffset + length) !== 0) {\r\n    length++;\r\n  }\r\n  return fromUTF8Array(new Uint8Array(dataView.buffer, keyIndirectOffset, length));\r\n}"]}