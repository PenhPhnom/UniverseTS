{"version":3,"file":"builder.js","sourceRoot":"","sources":["../../../../src/libs/flatbuffer/builder.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAA;AAC1C,OAAO,EAAE,YAAY,EAAE,kBAAkB,EAAE,UAAU,EAAE,sBAAsB,EAAE,MAAM,aAAa,CAAA;AAElG,OAAO,EAAE,IAAI,EAAE,MAAM,QAAQ,CAAA;AAE7B,MAAM,OAAO,OAAO;IAuBhB;;OAEG;IACH,YAAY,gBAAyB;QAtBrC,4CAA4C;QACpC,aAAQ,GAAG,CAAC,CAAA;QACpB,wCAAwC;QAChC,WAAM,GAAoB,IAAI,CAAA;QACtC,iDAAiD;QACzC,kBAAa,GAAG,CAAC,CAAA;QACzB,oDAAoD;QAC5C,aAAQ,GAAG,KAAK,CAAC;QACzB,mDAAmD;QAC3C,iBAAY,GAAG,CAAC,CAAA;QACxB,sCAAsC;QAC9B,YAAO,GAAa,EAAE,CAAA;QAC9B,0CAA0C;QAClC,qBAAgB,GAAG,CAAC,CAAA;QAC5B,0DAA0D;QAClD,mBAAc,GAAG,KAAK,CAAC;QAEvB,gBAAW,GAA4C,IAAI,CAAC;QAMlE,IAAI,YAAoB,CAAC;QAEzB,IAAI,CAAC,gBAAgB,EAAE,CAAC;YACtB,YAAY,GAAG,IAAI,CAAC;QACtB,CAAC;aAAM,CAAC;YACN,YAAY,GAAG,gBAAgB,CAAC;QAClC,CAAC;QAED;;;WAGG;QACH,IAAI,CAAC,EAAE,GAAG,UAAU,CAAC,QAAQ,CAAC,YAAY,CAAC,CAAC;QAC5C,IAAI,CAAC,KAAK,GAAG,YAAY,CAAC;IAC5B,CAAC;IAGD,KAAK;QACH,IAAI,CAAC,EAAE,CAAC,KAAK,EAAE,CAAC;QAChB,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,EAAE,CAAC,QAAQ,EAAE,CAAC;QAChC,IAAI,CAAC,QAAQ,GAAG,CAAC,CAAC;QAClB,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;QACnB,IAAI,CAAC,aAAa,GAAG,CAAC,CAAC;QACvB,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC;QACtB,IAAI,CAAC,YAAY,GAAG,CAAC,CAAC;QACtB,IAAI,CAAC,OAAO,GAAG,EAAE,CAAC;QAClB,IAAI,CAAC,gBAAgB,GAAG,CAAC,CAAC;QAC1B,IAAI,CAAC,cAAc,GAAG,KAAK,CAAC;QAC5B,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;IAC1B,CAAC;IAED;;;;;;OAMG;IACH,aAAa,CAAC,aAAsB;QAClC,IAAI,CAAC,cAAc,GAAG,aAAa,CAAC;IACtC,CAAC;IAED;;;;OAIG;IACH,UAAU;QACR,OAAO,IAAI,CAAC,EAAE,CAAC;IACjB,CAAC;IAED;;;OAGG;IACH,YAAY;QACV,OAAO,IAAI,CAAC,EAAE,CAAC,KAAK,EAAE,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC,QAAQ,EAAE,EAAE,IAAI,CAAC,EAAE,CAAC,QAAQ,EAAE,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,CAAC;IAC1F,CAAC;IAED;;;;;;;;OAQG;IACH,IAAI,CAAC,IAAY,EAAE,gBAAwB;QACzC,iDAAiD;QACjD,IAAI,IAAI,GAAG,IAAI,CAAC,QAAQ,EAAE,CAAC;YACzB,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;QACvB,CAAC;QAED,mEAAmE;QACnE,mCAAmC;QACnC,MAAM,UAAU,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,QAAQ,EAAE,GAAG,IAAI,CAAC,KAAK,GAAG,gBAAgB,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,IAAI,GAAG,CAAC,CAAC,CAAC;QAE9F,mCAAmC;QACnC,OAAO,IAAI,CAAC,KAAK,GAAG,UAAU,GAAG,IAAI,GAAG,gBAAgB,EAAE,CAAC;YACzD,MAAM,YAAY,GAAG,IAAI,CAAC,EAAE,CAAC,QAAQ,EAAE,CAAC;YACxC,IAAI,CAAC,EAAE,GAAG,OAAO,CAAC,cAAc,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;YAC1C,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,EAAE,CAAC,QAAQ,EAAE,GAAG,YAAY,CAAC;QAClD,CAAC;QAED,IAAI,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;IACvB,CAAC;IAED,GAAG,CAAC,SAAiB;QACnB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,SAAS,EAAE,CAAC,EAAE,EAAE,CAAC;YACnC,IAAI,CAAC,EAAE,CAAC,SAAS,CAAC,EAAE,IAAI,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;QACrC,CAAC;IACH,CAAC;IAED,SAAS,CAAC,KAAa;QACrB,IAAI,CAAC,EAAE,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,IAAI,CAAC,EAAE,KAAK,CAAC,CAAC;IAC5C,CAAC;IAED,UAAU,CAAC,KAAa;QACtB,IAAI,CAAC,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,KAAK,IAAI,CAAC,EAAE,KAAK,CAAC,CAAC;IAC7C,CAAC;IAED,UAAU,CAAC,KAAa;QACtB,IAAI,CAAC,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,KAAK,IAAI,CAAC,EAAE,KAAK,CAAC,CAAC;IAC7C,CAAC;IAED,UAAU,CAAC,KAAW;QACpB,IAAI,CAAC,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,KAAK,IAAI,CAAC,EAAE,KAAK,CAAC,CAAC;IAC7C,CAAC;IAED,YAAY,CAAC,KAAa;QACxB,IAAI,CAAC,EAAE,CAAC,YAAY,CAAC,IAAI,CAAC,KAAK,IAAI,CAAC,EAAE,KAAK,CAAC,CAAC;IAC/C,CAAC;IAED,YAAY,CAAC,KAAa;QACxB,IAAI,CAAC,EAAE,CAAC,YAAY,CAAC,IAAI,CAAC,KAAK,IAAI,CAAC,EAAE,KAAK,CAAC,CAAC;IAC/C,CAAC;IAED;;;OAGG;IACH,OAAO,CAAC,KAAa;QACnB,IAAI,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QAChB,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;IACxB,CAAC;IAED;;;OAGG;IACH,QAAQ,CAAC,KAAa;QACpB,IAAI,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QAChB,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;IACzB,CAAC;IAED;;;OAGG;IACH,QAAQ,CAAC,KAAa;QACpB,IAAI,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QAChB,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;IACzB,CAAC;IAED;;;OAGG;IACH,QAAQ,CAAC,KAAW;QAClB,IAAI,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QAChB,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;IACzB,CAAC;IAED;;;OAGG;IACH,UAAU,CAAC,KAAa;QACtB,IAAI,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QAChB,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;IAC3B,CAAC;IAED;;;OAGG;IACH,UAAU,CAAC,KAAa;QACtB,IAAI,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QAChB,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;IAC3B,CAAC;IAED,YAAY,CAAC,OAAe,EAAE,KAAa,EAAE,YAAoB;QAC/D,IAAI,IAAI,CAAC,cAAc,IAAI,KAAK,IAAI,YAAY,EAAE,CAAC;YACjD,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;YACpB,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QACrB,CAAC;IACH,CAAC;IAED,aAAa,CAAC,OAAe,EAAE,KAAa,EAAE,YAAoB;QAChE,IAAI,IAAI,CAAC,cAAc,IAAI,KAAK,IAAI,YAAY,EAAE,CAAC;YACjD,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;YACrB,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QACrB,CAAC;IACH,CAAC;IAED,aAAa,CAAC,OAAe,EAAE,KAAa,EAAE,YAAoB;QAChE,IAAI,IAAI,CAAC,cAAc,IAAI,KAAK,IAAI,YAAY,EAAE,CAAC;YACjD,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;YACrB,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QACrB,CAAC;IACH,CAAC;IAED,aAAa,CAAC,OAAe,EAAE,KAAW,EAAE,YAAkB;QAC5D,IAAI,IAAI,CAAC,cAAc,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,YAAY,CAAC,EAAE,CAAC;YACvD,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;YACrB,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QACrB,CAAC;IACH,CAAC;IAED,eAAe,CAAC,OAAe,EAAE,KAAa,EAAE,YAAoB;QAClE,IAAI,IAAI,CAAC,cAAc,IAAI,KAAK,IAAI,YAAY,EAAE,CAAC;YACjD,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;YACvB,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QACrB,CAAC;IACH,CAAC;IAED,eAAe,CAAC,OAAe,EAAE,KAAa,EAAE,YAAoB;QAClE,IAAI,IAAI,CAAC,cAAc,IAAI,KAAK,IAAI,YAAY,EAAE,CAAC;YACjD,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;YACvB,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QACrB,CAAC;IACH,CAAC;IAED,cAAc,CAAC,OAAe,EAAE,KAAa,EAAE,YAAoB;QACjE,IAAI,IAAI,CAAC,cAAc,IAAI,KAAK,IAAI,YAAY,EAAE,CAAC;YACjD,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;YACtB,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QACrB,CAAC;IACH,CAAC;IAED;;OAEG;IACH,cAAc,CAAC,OAAe,EAAE,KAAa,EAAE,YAAoB;QACjE,IAAI,KAAK,IAAI,YAAY,EAAE,CAAC;YAC1B,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;YACnB,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QACrB,CAAC;IACH,CAAC;IAED;;;;OAIG;IACH,MAAM,CAAC,GAAW;QAChB,IAAI,GAAG,IAAI,IAAI,CAAC,MAAM,EAAE,EAAE,CAAC;YACzB,MAAM,IAAI,KAAK,CAAC,gDAAgD,CAAC,CAAC;QACpE,CAAC;IACH,CAAC;IAED;;;OAGG;IACH,SAAS;QACP,IAAI,IAAI,CAAC,QAAQ,EAAE,CAAC;YAClB,MAAM,IAAI,KAAK,CAAC,uDAAuD,CAAC,CAAC;QAC3E,CAAC;IACH,CAAC;IAED;;OAEG;IACH,IAAI,CAAC,OAAe;QAClB,IAAI,IAAI,CAAC,MAAM,KAAK,IAAI;YACtB,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC;IACzC,CAAC;IAED;;OAEG;IACH,MAAM;QACJ,OAAO,IAAI,CAAC,EAAE,CAAC,QAAQ,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC;IACzC,CAAC;IAED;;;;;;;;;;;OAWG;IACH,MAAM,CAAC,cAAc,CAAC,EAAc;QAClC,MAAM,YAAY,GAAG,EAAE,CAAC,QAAQ,EAAE,CAAC;QAEnC,mDAAmD;QACnD,IAAI,YAAY,GAAG,UAAU,EAAE,CAAC;YAC9B,MAAM,IAAI,KAAK,CAAC,qDAAqD,CAAC,CAAC;QACzE,CAAC;QAED,MAAM,YAAY,GAAG,YAAY,IAAI,CAAC,CAAC;QACvC,MAAM,GAAG,GAAG,UAAU,CAAC,QAAQ,CAAC,YAAY,CAAC,CAAC;QAC9C,GAAG,CAAC,WAAW,CAAC,YAAY,GAAG,YAAY,CAAC,CAAC;QAC7C,GAAG,CAAC,KAAK,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,KAAK,EAAE,EAAE,YAAY,GAAG,YAAY,CAAC,CAAC;QACzD,OAAO,GAAG,CAAC;IACb,CAAC;IAED;;;;OAIG;IACH,SAAS,CAAC,MAAc;QACtB,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE,CAAC,CAAC,CAAC,CAAC,oCAAoC;QAC9D,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,MAAM,GAAG,UAAU,CAAC,CAAC;IACvD,CAAC;IAED;;;;OAIG;IACH,WAAW,CAAC,SAAiB;QAC3B,IAAI,CAAC,SAAS,EAAE,CAAC;QACjB,IAAI,IAAI,CAAC,MAAM,IAAI,IAAI,EAAE,CAAC;YACxB,IAAI,CAAC,MAAM,GAAG,EAAE,CAAC;QACnB,CAAC;QACD,IAAI,CAAC,aAAa,GAAG,SAAS,CAAC;QAC/B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,SAAS,EAAE,CAAC,EAAE,EAAE,CAAC;YACnC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,+CAA+C;QACrE,CAAC;QACD,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;QACrB,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC;IACpC,CAAC;IAED;;;;OAIG;IACH,SAAS;QACP,IAAI,IAAI,CAAC,MAAM,IAAI,IAAI,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC;YAC1C,MAAM,IAAI,KAAK,CAAC,mDAAmD,CAAC,CAAC;QACvE,CAAC;QAED,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;QACjB,MAAM,SAAS,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC;QAEhC,wBAAwB;QACxB,IAAI,CAAC,GAAG,IAAI,CAAC,aAAa,GAAG,CAAC,CAAC;QAC/B,oCAAoC;QACpC,OAAO,CAAC,IAAI,CAAC,IAAI,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAA,CAAC;QAC7C,MAAM,YAAY,GAAG,CAAC,GAAG,CAAC,CAAC;QAE3B,gCAAgC;QAChC,OAAO,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC;YACnB,6CAA6C;YAC7C,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,SAAS,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QACtE,CAAC;QAED,MAAM,eAAe,GAAG,CAAC,CAAC,CAAC,oBAAoB;QAC/C,IAAI,CAAC,QAAQ,CAAC,SAAS,GAAG,IAAI,CAAC,YAAY,CAAC,CAAC;QAC7C,MAAM,GAAG,GAAG,CAAC,YAAY,GAAG,eAAe,CAAC,GAAG,YAAY,CAAC;QAC5D,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;QAEnB,8DAA8D;QAC9D,IAAI,eAAe,GAAG,CAAC,CAAC;QACxB,MAAM,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC;QACzB,UAAU,EACR,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;YACzC,MAAM,GAAG,GAAG,IAAI,CAAC,EAAE,CAAC,QAAQ,EAAE,GAAG,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;YACjD,IAAI,GAAG,IAAI,IAAI,CAAC,EAAE,CAAC,SAAS,CAAC,GAAG,CAAC,EAAE,CAAC;gBAClC,KAAK,IAAI,CAAC,GAAG,YAAY,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,IAAI,YAAY,EAAE,CAAC;oBACtD,IAAI,IAAI,CAAC,EAAE,CAAC,SAAS,CAAC,GAAG,GAAG,CAAC,CAAC,IAAI,IAAI,CAAC,EAAE,CAAC,SAAS,CAAC,GAAG,GAAG,CAAC,CAAC,EAAE,CAAC;wBAC7D,SAAS,UAAU,CAAC;oBACtB,CAAC;gBACH,CAAC;gBACD,eAAe,GAAG,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;gBAClC,MAAM;YACR,CAAC;QACH,CAAC;QAED,IAAI,eAAe,EAAE,CAAC;YACpB,iBAAiB;YACjB,6BAA6B;YAC7B,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,EAAE,CAAC,QAAQ,EAAE,GAAG,SAAS,CAAC;YAE5C,kCAAkC;YAClC,IAAI,CAAC,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,KAAK,EAAE,eAAe,GAAG,SAAS,CAAC,CAAC;QAC9D,CAAC;aAAM,CAAC;YACN,YAAY;YACZ,iEAAiE;YACjE,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,CAAC;YAEjC,iCAAiC;YACjC,IAAI,CAAC,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,EAAE,CAAC,QAAQ,EAAE,GAAG,SAAS,EAAE,IAAI,CAAC,MAAM,EAAE,GAAG,SAAS,CAAC,CAAC;QAChF,CAAC;QAED,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC;QACtB,OAAO,SAAmB,CAAC;IAC7B,CAAC;IAED;;OAEG;IACH,MAAM,CAAC,UAAkB,EAAE,mBAA4B,EAAE,eAAyB;QAChF,MAAM,WAAW,GAAG,eAAe,CAAC,CAAC,CAAC,kBAAkB,CAAC,CAAC,CAAC,CAAC,CAAC;QAC7D,IAAI,mBAAmB,EAAE,CAAC;YACxB,MAAM,eAAe,GAAG,mBAAmB,CAAC;YAC5C,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,UAAU;gBACjC,sBAAsB,GAAG,WAAW,CAAC,CAAC;YACxC,IAAI,eAAe,CAAC,MAAM,IAAI,sBAAsB,EAAE,CAAC;gBACrD,MAAM,IAAI,KAAK,CAAC,8CAA8C;oBAC5D,sBAAsB,CAAC,CAAC;YAC5B,CAAC;YACD,KAAK,IAAI,CAAC,GAAG,sBAAsB,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC;gBACrD,IAAI,CAAC,SAAS,CAAC,eAAe,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC;YAChD,CAAC;QACH,CAAC;QACD,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,UAAU,GAAG,WAAW,CAAC,CAAC;QACnD,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC;QAC3B,IAAI,WAAW,EAAE,CAAC;YAChB,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC,QAAQ,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC;QACjD,CAAC;QACD,IAAI,CAAC,EAAE,CAAC,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IAClC,CAAC;IAED;;OAEG;IACH,kBAAkB,CAAgB,UAAkB,EAAE,mBAA4B;QAChF,IAAI,CAAC,MAAM,CAAC,UAAU,EAAE,mBAAmB,EAAE,IAAI,CAAC,CAAC;IACrD,CAAC;IAED;;;OAGG;IACH,aAAa,CAAC,KAAa,EAAE,KAAa;QACxC,MAAM,WAAW,GAAG,IAAI,CAAC,EAAE,CAAC,QAAQ,EAAE,GAAG,KAAK,CAAC;QAC/C,MAAM,YAAY,GAAG,WAAW,GAAG,IAAI,CAAC,EAAE,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC;QAClE,MAAM,EAAE,GAAG,IAAI,CAAC,EAAE,CAAC,SAAS,CAAC,YAAY,GAAG,KAAK,CAAC,IAAI,CAAC,CAAC;QAExD,kEAAkE;QAClE,IAAI,CAAC,EAAE,EAAE,CAAC;YACR,MAAM,IAAI,KAAK,CAAC,qBAAqB,GAAG,KAAK,GAAG,cAAc,CAAC,CAAC;QAClE,CAAC;IACH,CAAC;IAED;;;;;;;;OAQG;IACH,WAAW,CAAC,SAAiB,EAAE,SAAiB,EAAE,SAAiB;QACjE,IAAI,CAAC,SAAS,EAAE,CAAC;QACjB,IAAI,CAAC,gBAAgB,GAAG,SAAS,CAAC;QAClC,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE,SAAS,GAAG,SAAS,CAAC,CAAC;QAC7C,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,SAAS,GAAG,SAAS,CAAC,CAAC,CAAC,gCAAgC;IAC/E,CAAC;IAED;;;;;;OAMG;IACH,SAAS;QACP,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;QACvC,OAAO,IAAI,CAAC,MAAM,EAAE,CAAC;IACvB,CAAC;IAED;;;;;;OAMG;IACH,kBAAkB,CAAC,CAAsB;QACvC,IAAI,CAAC,CAAC,EAAE,CAAC;YAAC,OAAO,CAAC,CAAA;QAAC,CAAC;QAEpB,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC;YACtB,IAAI,CAAC,WAAW,GAAG,IAAI,GAAG,EAAE,CAAC;QAC/B,CAAC;QAED,IAAI,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC;YAC5B,OAAO,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC,CAAW,CAAA;QAC1C,CAAC;QACD,MAAM,MAAM,GAAG,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC,CAAA;QACnC,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC,EAAE,MAAM,CAAC,CAAA;QAC/B,OAAO,MAAM,CAAA;IACf,CAAC;IAED;;;;;;OAMG;IACH,YAAY,CAAC,CAAsB;QACjC,IAAI,CAAC,CAAC,EAAE,CAAC;YAAC,OAAO,CAAC,CAAA;QAAC,CAAC;QACpB,IAAI,IAAoC,CAAC;QACzC,IAAI,CAAC,YAAY,UAAU,EAAE,CAAC;YAC5B,IAAI,GAAG,CAAC,CAAC;QACX,CAAC;aAAM,CAAC;YACN,IAAI,GAAG,EAAE,CAAC;YACV,IAAI,CAAC,GAAG,CAAC,CAAC;YAEV,OAAO,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,CAAC;gBACpB,IAAI,SAAS,CAAC;gBAEd,gBAAgB;gBAChB,MAAM,CAAC,GAAG,CAAC,CAAC,UAAU,CAAC,CAAC,EAAE,CAAC,CAAC;gBAC5B,IAAI,CAAC,GAAG,MAAM,IAAI,CAAC,IAAI,MAAM,EAAE,CAAC;oBAC9B,SAAS,GAAG,CAAC,CAAC;gBAChB,CAAC;qBAAM,CAAC;oBACN,MAAM,CAAC,GAAG,CAAC,CAAC,UAAU,CAAC,CAAC,EAAE,CAAC,CAAC;oBAC5B,SAAS,GAAG,CAAC,CAAC,IAAI,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,OAAO,GAAG,CAAC,MAAM,IAAI,EAAE,CAAC,GAAG,MAAM,CAAC,CAAC;gBAClE,CAAC;gBAED,eAAe;gBACf,IAAI,SAAS,GAAG,IAAI,EAAE,CAAC;oBACrB,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;gBACvB,CAAC;qBAAM,CAAC;oBACN,IAAI,SAAS,GAAG,KAAK,EAAE,CAAC;wBACtB,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,SAAS,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,IAAI,CAAC,CAAC;oBAC9C,CAAC;yBAAM,CAAC;wBACN,IAAI,SAAS,GAAG,OAAO,EAAE,CAAC;4BACxB,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,SAAS,IAAI,EAAE,CAAC,GAAG,IAAI,CAAC,GAAG,IAAI,CAAC,CAAC;wBAC/C,CAAC;6BAAM,CAAC;4BACN,IAAI,CAAC,IAAI,CACP,CAAC,CAAC,SAAS,IAAI,EAAE,CAAC,GAAG,IAAI,CAAC,GAAG,IAAI,EACjC,CAAC,CAAC,SAAS,IAAI,EAAE,CAAC,GAAG,IAAI,CAAC,GAAG,IAAI,CAAC,CAAC;wBACvC,CAAC;wBACD,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,SAAS,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,IAAI,CAAC,CAAC;oBAC9C,CAAC;oBACD,IAAI,CAAC,IAAI,CAAC,CAAC,SAAS,GAAG,IAAI,CAAC,GAAG,IAAI,CAAC,CAAC;gBACvC,CAAC;YACH,CAAC;QACH,CAAC;QAED,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;QAChB,IAAI,CAAC,WAAW,CAAC,CAAC,EAAE,IAAI,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;QACpC,IAAI,CAAC,EAAE,CAAC,WAAW,CAAC,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,MAAM,CAAC,CAAC;QAC/C,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,MAAM,GAAG,IAAI,CAAC,KAAK,EAAE,KAAK,GAAG,IAAI,CAAC,EAAE,CAAC,KAAK,EAAE,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;YACnF,KAAK,CAAC,MAAM,EAAE,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;QAC5B,CAAC;QACD,OAAO,IAAI,CAAC,SAAS,EAAE,CAAC;IAC1B,CAAC;IAED;;OAEG;IACH,UAAU,CAAC,GAAW,EAAE,IAAY;QAClC,OAAO,IAAI,CAAC,MAAM,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;IAChC,CAAC;IAED;;;;OAIG;IACH,kBAAkB,CAAC,GAA8B;QAC/C,IAAG,GAAG,KAAK,IAAI,EAAE,CAAC;YAChB,OAAO,CAAC,CAAA;QACV,CAAC;QAED,IAAG,OAAO,GAAG,KAAK,QAAQ,EAAE,CAAC;YAC3B,OAAO,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC;QAChC,CAAC;aAAM,CAAC;YACN,OAAO,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACxB,CAAC;IACH,CAAC;IAED;;;;OAIG;IACH,sBAAsB,CAAC,IAAc;QACnC,MAAM,GAAG,GAAG,EAAE,CAAC;QAEf,KAAI,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,EAAE,CAAC,EAAE,CAAC;YACpC,MAAM,GAAG,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;YAEpB,IAAG,GAAG,KAAK,IAAI,EAAE,CAAC;gBAChB,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC,CAAC,CAAC;YACzC,CAAC;iBAAM,CAAC;gBACN,MAAM,IAAI,KAAK,CACb,uEAAuE,CAAC,CAAC;YAC7E,CAAC;QACH,CAAC;QAED,OAAO,GAAG,CAAC;IACb,CAAC;IAED,sBAAsB,CAAC,IAAc,EAAE,SAAqD;QAC1F,SAAS,CAAC,IAAI,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;QAC7B,IAAI,CAAC,sBAAsB,CAAC,IAAI,CAAC,CAAC;QAClC,OAAO,IAAI,CAAC,SAAS,EAAE,CAAC;IAC1B,CAAC;CACF","sourcesContent":["import { ByteBuffer } from \"./byte-buffer\"\r\nimport { SIZEOF_SHORT, SIZE_PREFIX_LENGTH, SIZEOF_INT, FILE_IDENTIFIER_LENGTH } from \"./constants\"\r\nimport { Offset, IGeneratedObject } from \"./types\"\r\nimport { Long } from \"./long\"\r\n\r\nexport class Builder {\r\n    private bb: ByteBuffer\r\n    /** Remaining space in the ByteBuffer. */\r\n    private space: number\r\n    /** Minimum alignment encountered so far. */\r\n    private minalign = 1\r\n    /** The vtable for the current table. */\r\n    private vtable: number[] | null = null\r\n    /** The amount of fields we're actually using. */\r\n    private vtable_in_use = 0\r\n    /** Whether we are currently serializing a table. */\r\n    private isNested = false;\r\n    /** Starting offset of the current struct/table. */\r\n    private object_start = 0\r\n    /** List of offsets of all vtables. */\r\n    private vtables: number[] = []\r\n    /** For the current vector being built. */\r\n    private vector_num_elems = 0 \r\n    /** False omits default values from the serialized data */\r\n    private force_defaults = false;\r\n    \r\n    private string_maps: Map<string | Uint8Array, number> | null = null;\r\n  \r\n    /**\r\n     * Create a FlatBufferBuilder.\r\n     */\r\n    constructor(opt_initial_size?: number) {\r\n      let initial_size: number;\r\n  \r\n      if (!opt_initial_size) {\r\n        initial_size = 1024;\r\n      } else {\r\n        initial_size = opt_initial_size;\r\n      }\r\n  \r\n      /**\r\n       * @type {ByteBuffer}\r\n       * @private\r\n       */\r\n      this.bb = ByteBuffer.allocate(initial_size);\r\n      this.space = initial_size;\r\n    }\r\n  \r\n  \r\n    clear(): void {\r\n      this.bb.clear();\r\n      this.space = this.bb.capacity();\r\n      this.minalign = 1;\r\n      this.vtable = null;\r\n      this.vtable_in_use = 0;\r\n      this.isNested = false;\r\n      this.object_start = 0;\r\n      this.vtables = [];\r\n      this.vector_num_elems = 0;\r\n      this.force_defaults = false;\r\n      this.string_maps = null;\r\n    }\r\n  \r\n    /**\r\n     * In order to save space, fields that are set to their default value\r\n     * don't get serialized into the buffer. Forcing defaults provides a\r\n     * way to manually disable this optimization.\r\n     *\r\n     * @param forceDefaults true always serializes default values\r\n     */\r\n    forceDefaults(forceDefaults: boolean): void {\r\n      this.force_defaults = forceDefaults;\r\n    }\r\n  \r\n    /**\r\n     * Get the ByteBuffer representing the FlatBuffer. Only call this after you've\r\n     * called finish(). The actual data starts at the ByteBuffer's current position,\r\n     * not necessarily at 0.\r\n     */\r\n    dataBuffer(): ByteBuffer {\r\n      return this.bb;\r\n    }\r\n  \r\n    /**\r\n     * Get the bytes representing the FlatBuffer. Only call this after you've\r\n     * called finish().\r\n     */\r\n    asUint8Array(): Uint8Array {\r\n      return this.bb.bytes().subarray(this.bb.position(), this.bb.position() + this.offset());\r\n    }\r\n  \r\n    /**\r\n     * Prepare to write an element of `size` after `additional_bytes` have been\r\n     * written, e.g. if you write a string, you need to align such the int length\r\n     * field is aligned to 4 bytes, and the string data follows it directly. If all\r\n     * you need to do is alignment, `additional_bytes` will be 0.\r\n     *\r\n     * @param size This is the of the new element to write\r\n     * @param additional_bytes The padding size\r\n     */\r\n    prep(size: number, additional_bytes: number): void {\r\n      // Track the biggest thing we've ever aligned to.\r\n      if (size > this.minalign) {\r\n        this.minalign = size;\r\n      }\r\n  \r\n      // Find the amount of alignment needed such that `size` is properly\r\n      // aligned after `additional_bytes`\r\n      const align_size = ((~(this.bb.capacity() - this.space + additional_bytes)) + 1) & (size - 1);\r\n  \r\n      // Reallocate the buffer if needed.\r\n      while (this.space < align_size + size + additional_bytes) {\r\n        const old_buf_size = this.bb.capacity();\r\n        this.bb = Builder.growByteBuffer(this.bb);\r\n        this.space += this.bb.capacity() - old_buf_size;\r\n      }\r\n  \r\n      this.pad(align_size);\r\n    }\r\n  \r\n    pad(byte_size: number): void {\r\n      for (let i = 0; i < byte_size; i++) {\r\n        this.bb.writeInt8(--this.space, 0);\r\n      }\r\n    }\r\n  \r\n    writeInt8(value: number): void {\r\n      this.bb.writeInt8(this.space -= 1, value);\r\n    }\r\n  \r\n    writeInt16(value: number): void {\r\n      this.bb.writeInt16(this.space -= 2, value);\r\n    }\r\n  \r\n    writeInt32(value: number): void {\r\n      this.bb.writeInt32(this.space -= 4, value);\r\n    }\r\n  \r\n    writeInt64(value: Long): void {\r\n      this.bb.writeInt64(this.space -= 8, value);\r\n    }\r\n  \r\n    writeFloat32(value: number): void {\r\n      this.bb.writeFloat32(this.space -= 4, value);\r\n    }\r\n  \r\n    writeFloat64(value: number): void {\r\n      this.bb.writeFloat64(this.space -= 8, value);\r\n    }\r\n  \r\n    /**\r\n     * Add an `int8` to the buffer, properly aligned, and grows the buffer (if necessary).\r\n     * @param value The `int8` to add the the buffer.\r\n     */\r\n    addInt8(value: number): void {\r\n      this.prep(1, 0);\r\n      this.writeInt8(value);\r\n    }\r\n  \r\n    /**\r\n     * Add an `int16` to the buffer, properly aligned, and grows the buffer (if necessary).\r\n     * @param value The `int16` to add the the buffer.\r\n     */\r\n    addInt16(value: number): void {\r\n      this.prep(2, 0);\r\n      this.writeInt16(value);\r\n    }\r\n  \r\n    /**\r\n     * Add an `int32` to the buffer, properly aligned, and grows the buffer (if necessary).\r\n     * @param value The `int32` to add the the buffer.\r\n     */\r\n    addInt32(value: number): void {\r\n      this.prep(4, 0);\r\n      this.writeInt32(value);\r\n    }\r\n  \r\n    /**\r\n     * Add an `int64` to the buffer, properly aligned, and grows the buffer (if necessary).\r\n     * @param value The `int64` to add the the buffer.\r\n     */\r\n    addInt64(value: Long): void {\r\n      this.prep(8, 0);\r\n      this.writeInt64(value);\r\n    }\r\n  \r\n    /**\r\n     * Add a `float32` to the buffer, properly aligned, and grows the buffer (if necessary).\r\n     * @param value The `float32` to add the the buffer.\r\n     */\r\n    addFloat32(value: number): void {\r\n      this.prep(4, 0);\r\n      this.writeFloat32(value);\r\n    }\r\n  \r\n    /**\r\n     * Add a `float64` to the buffer, properly aligned, and grows the buffer (if necessary).\r\n     * @param value The `float64` to add the the buffer.\r\n     */\r\n    addFloat64(value: number): void {\r\n      this.prep(8, 0);\r\n      this.writeFloat64(value);\r\n    }\r\n  \r\n    addFieldInt8(voffset: number, value: number, defaultValue: number): void {\r\n      if (this.force_defaults || value != defaultValue) {\r\n        this.addInt8(value);\r\n        this.slot(voffset);\r\n      }\r\n    }\r\n  \r\n    addFieldInt16(voffset: number, value: number, defaultValue: number): void {\r\n      if (this.force_defaults || value != defaultValue) {\r\n        this.addInt16(value);\r\n        this.slot(voffset);\r\n      }\r\n    }\r\n  \r\n    addFieldInt32(voffset: number, value: number, defaultValue: number): void {\r\n      if (this.force_defaults || value != defaultValue) {\r\n        this.addInt32(value);\r\n        this.slot(voffset);\r\n      }\r\n    }\r\n  \r\n    addFieldInt64(voffset: number, value: Long, defaultValue: Long): void {\r\n      if (this.force_defaults || !value.equals(defaultValue)) {\r\n        this.addInt64(value);\r\n        this.slot(voffset);\r\n      }\r\n    }\r\n  \r\n    addFieldFloat32(voffset: number, value: number, defaultValue: number): void {\r\n      if (this.force_defaults || value != defaultValue) {\r\n        this.addFloat32(value);\r\n        this.slot(voffset);\r\n      }\r\n    }\r\n  \r\n    addFieldFloat64(voffset: number, value: number, defaultValue: number): void {\r\n      if (this.force_defaults || value != defaultValue) {\r\n        this.addFloat64(value);\r\n        this.slot(voffset);\r\n      }\r\n    }\r\n  \r\n    addFieldOffset(voffset: number, value: Offset, defaultValue: Offset): void {\r\n      if (this.force_defaults || value != defaultValue) {\r\n        this.addOffset(value);\r\n        this.slot(voffset);\r\n      }\r\n    }\r\n  \r\n    /**\r\n     * Structs are stored inline, so nothing additional is being added. `d` is always 0.\r\n     */\r\n    addFieldStruct(voffset: number, value: Offset, defaultValue: Offset): void {\r\n      if (value != defaultValue) {\r\n        this.nested(value);\r\n        this.slot(voffset);\r\n      }\r\n    }\r\n  \r\n    /**\r\n     * Structures are always stored inline, they need to be created right\r\n     * where they're used.  You'll get this assertion failure if you\r\n     * created it elsewhere.\r\n     */\r\n    nested(obj: Offset): void {\r\n      if (obj != this.offset()) {\r\n        throw new Error('FlatBuffers: struct must be serialized inline.');\r\n      }\r\n    }\r\n  \r\n    /**\r\n     * Should not be creating any other object, string or vector\r\n     * while an object is being constructed\r\n     */\r\n    notNested(): void {\r\n      if (this.isNested) {\r\n        throw new Error('FlatBuffers: object serialization must not be nested.');\r\n      }\r\n    }\r\n  \r\n    /**\r\n     * Set the current vtable at `voffset` to the current location in the buffer.\r\n     */\r\n    slot(voffset: number): void {\r\n      if (this.vtable !== null)\r\n        this.vtable[voffset] = this.offset();\r\n    }\r\n  \r\n    /**\r\n     * @returns Offset relative to the end of the buffer.\r\n     */\r\n    offset(): Offset {\r\n      return this.bb.capacity() - this.space;\r\n    }\r\n  \r\n    /**\r\n     * Doubles the size of the backing ByteBuffer and copies the old data towards\r\n     * the end of the new buffer (since we build the buffer backwards).\r\n     *\r\n     * @param bb The current buffer with the existing data\r\n     * @returns A new byte buffer with the old data copied\r\n     * to it. The data is located at the end of the buffer.\r\n     *\r\n     * uint8Array.set() formally takes {Array<number>|ArrayBufferView}, so to pass\r\n     * it a uint8Array we need to suppress the type check:\r\n     * @suppress {checkTypes}\r\n     */\r\n    static growByteBuffer(bb: ByteBuffer): ByteBuffer {\r\n      const old_buf_size = bb.capacity();\r\n  \r\n      // Ensure we don't grow beyond what fits in an int.\r\n      if (old_buf_size & 0xC0000000) {\r\n        throw new Error('FlatBuffers: cannot grow buffer beyond 2 gigabytes.');\r\n      }\r\n  \r\n      const new_buf_size = old_buf_size << 1;\r\n      const nbb = ByteBuffer.allocate(new_buf_size);\r\n      nbb.setPosition(new_buf_size - old_buf_size);\r\n      nbb.bytes().set(bb.bytes(), new_buf_size - old_buf_size);\r\n      return nbb;\r\n    }\r\n  \r\n    /**\r\n     * Adds on offset, relative to where it will be written.\r\n     *\r\n     * @param offset The offset to add.\r\n     */\r\n    addOffset(offset: Offset): void {\r\n      this.prep(SIZEOF_INT, 0); // Ensure alignment is already done.\r\n      this.writeInt32(this.offset() - offset + SIZEOF_INT);\r\n    }\r\n  \r\n    /**\r\n     * Start encoding a new object in the buffer.  Users will not usually need to\r\n     * call this directly. The FlatBuffers compiler will generate helper methods\r\n     * that call this method internally.\r\n     */\r\n    startObject(numfields: number): void {\r\n      this.notNested();\r\n      if (this.vtable == null) {\r\n        this.vtable = [];\r\n      }\r\n      this.vtable_in_use = numfields;\r\n      for (let i = 0; i < numfields; i++) {\r\n        this.vtable[i] = 0; // This will push additional elements as needed\r\n      }\r\n      this.isNested = true;\r\n      this.object_start = this.offset();\r\n    }\r\n  \r\n    /**\r\n     * Finish off writing the object that is under construction.\r\n     *\r\n     * @returns The offset to the object inside `dataBuffer`\r\n     */\r\n    endObject(): Offset {\r\n      if (this.vtable == null || !this.isNested) {\r\n        throw new Error('FlatBuffers: endObject called without startObject');\r\n      }\r\n  \r\n      this.addInt32(0);\r\n      const vtableloc = this.offset();\r\n  \r\n      // Trim trailing zeroes.\r\n      let i = this.vtable_in_use - 1;\r\n      // eslint-disable-next-line no-empty\r\n      for (; i >= 0 && this.vtable[i] == 0; i--) {}\r\n      const trimmed_size = i + 1;\r\n  \r\n      // Write out the current vtable.\r\n      for (; i >= 0; i--) {\r\n        // Offset relative to the start of the table.\r\n        this.addInt16(this.vtable[i] != 0 ? vtableloc - this.vtable[i] : 0);\r\n      }\r\n  \r\n      const standard_fields = 2; // The fields below:\r\n      this.addInt16(vtableloc - this.object_start);\r\n      const len = (trimmed_size + standard_fields) * SIZEOF_SHORT;\r\n      this.addInt16(len);\r\n  \r\n      // Search for an existing vtable that matches the current one.\r\n      let existing_vtable = 0;\r\n      const vt1 = this.space;\r\n    outer_loop:\r\n      for (i = 0; i < this.vtables.length; i++) {\r\n        const vt2 = this.bb.capacity() - this.vtables[i];\r\n        if (len == this.bb.readInt16(vt2)) {\r\n          for (let j = SIZEOF_SHORT; j < len; j += SIZEOF_SHORT) {\r\n            if (this.bb.readInt16(vt1 + j) != this.bb.readInt16(vt2 + j)) {\r\n              continue outer_loop;\r\n            }\r\n          }\r\n          existing_vtable = this.vtables[i];\r\n          break;\r\n        }\r\n      }\r\n  \r\n      if (existing_vtable) {\r\n        // Found a match:\r\n        // Remove the current vtable.\r\n        this.space = this.bb.capacity() - vtableloc;\r\n  \r\n        // Point table to existing vtable.\r\n        this.bb.writeInt32(this.space, existing_vtable - vtableloc);\r\n      } else {\r\n        // No match:\r\n        // Add the location of the current vtable to the list of vtables.\r\n        this.vtables.push(this.offset());\r\n  \r\n        // Point table to current vtable.\r\n        this.bb.writeInt32(this.bb.capacity() - vtableloc, this.offset() - vtableloc);\r\n      }\r\n  \r\n      this.isNested = false;\r\n      return vtableloc as Offset;\r\n    }\r\n  \r\n    /**\r\n     * Finalize a buffer, poiting to the given `root_table`.\r\n     */\r\n    finish(root_table: Offset, opt_file_identifier?: string, opt_size_prefix?: boolean): void {\r\n      const size_prefix = opt_size_prefix ? SIZE_PREFIX_LENGTH : 0;\r\n      if (opt_file_identifier) {\r\n        const file_identifier = opt_file_identifier;\r\n        this.prep(this.minalign, SIZEOF_INT +\r\n          FILE_IDENTIFIER_LENGTH + size_prefix);\r\n        if (file_identifier.length != FILE_IDENTIFIER_LENGTH) {\r\n          throw new Error('FlatBuffers: file identifier must be length ' +\r\n            FILE_IDENTIFIER_LENGTH);\r\n        }\r\n        for (let i = FILE_IDENTIFIER_LENGTH - 1; i >= 0; i--) {\r\n          this.writeInt8(file_identifier.charCodeAt(i));\r\n        }\r\n      }\r\n      this.prep(this.minalign, SIZEOF_INT + size_prefix);\r\n      this.addOffset(root_table);\r\n      if (size_prefix) {\r\n        this.addInt32(this.bb.capacity() - this.space);\r\n      }\r\n      this.bb.setPosition(this.space);\r\n    }\r\n  \r\n    /**\r\n     * Finalize a size prefixed buffer, pointing to the given `root_table`.\r\n     */\r\n    finishSizePrefixed(this: Builder, root_table: Offset, opt_file_identifier?: string): void {\r\n      this.finish(root_table, opt_file_identifier, true);\r\n    }\r\n  \r\n    /**\r\n     * This checks a required field has been set in a given table that has\r\n     * just been constructed.\r\n     */\r\n    requiredField(table: Offset, field: number): void {\r\n      const table_start = this.bb.capacity() - table;\r\n      const vtable_start = table_start - this.bb.readInt32(table_start);\r\n      const ok = this.bb.readInt16(vtable_start + field) != 0;\r\n  \r\n      // If this fails, the caller will show what field needs to be set.\r\n      if (!ok) {\r\n        throw new Error('FlatBuffers: field ' + field + ' must be set');\r\n      }\r\n    }\r\n  \r\n    /**\r\n     * Start a new array/vector of objects.  Users usually will not call\r\n     * this directly. The FlatBuffers compiler will create a start/end\r\n     * method for vector types in generated code.\r\n     *\r\n     * @param elem_size The size of each element in the array\r\n     * @param num_elems The number of elements in the array\r\n     * @param alignment The alignment of the array\r\n     */\r\n    startVector(elem_size: number, num_elems: number, alignment: number): void {\r\n      this.notNested();\r\n      this.vector_num_elems = num_elems;\r\n      this.prep(SIZEOF_INT, elem_size * num_elems);\r\n      this.prep(alignment, elem_size * num_elems); // Just in case alignment > int.\r\n    }\r\n  \r\n    /**\r\n     * Finish off the creation of an array and all its elements. The array must be\r\n     * created with `startVector`.\r\n     *\r\n     * @returns The offset at which the newly created array\r\n     * starts.\r\n     */\r\n    endVector(): Offset {\r\n      this.writeInt32(this.vector_num_elems);\r\n      return this.offset();\r\n    }\r\n  \r\n    /**\r\n     * Encode the string `s` in the buffer using UTF-8. If the string passed has \r\n     * already been seen, we return the offset of the already written string\r\n     *\r\n     * @param s The string to encode\r\n     * @return The offset in the buffer where the encoded string starts\r\n     */\r\n    createSharedString(s: string | Uint8Array): Offset {\r\n      if (!s) { return 0 }\r\n  \r\n      if (!this.string_maps) {\r\n        this.string_maps = new Map();\r\n      }\r\n  \r\n      if (this.string_maps.has(s)) {\r\n        return this.string_maps.get(s) as Offset\r\n      }\r\n      const offset = this.createString(s)\r\n      this.string_maps.set(s, offset)\r\n      return offset\r\n    }\r\n  \r\n    /**\r\n     * Encode the string `s` in the buffer using UTF-8. If a Uint8Array is passed\r\n     * instead of a string, it is assumed to contain valid UTF-8 encoded data.\r\n     *\r\n     * @param s The string to encode\r\n     * @return The offset in the buffer where the encoded string starts\r\n     */\r\n    createString(s: string | Uint8Array): Offset {\r\n      if (!s) { return 0 }\r\n      let utf8: string | Uint8Array | number[];\r\n      if (s instanceof Uint8Array) {\r\n        utf8 = s;\r\n      } else {\r\n        utf8 = [];\r\n        let i = 0;\r\n  \r\n        while (i < s.length) {\r\n          let codePoint;\r\n  \r\n          // Decode UTF-16\r\n          const a = s.charCodeAt(i++);\r\n          if (a < 0xD800 || a >= 0xDC00) {\r\n            codePoint = a;\r\n          } else {\r\n            const b = s.charCodeAt(i++);\r\n            codePoint = (a << 10) + b + (0x10000 - (0xD800 << 10) - 0xDC00);\r\n          }\r\n  \r\n          // Encode UTF-8\r\n          if (codePoint < 0x80) {\r\n            utf8.push(codePoint);\r\n          } else {\r\n            if (codePoint < 0x800) {\r\n              utf8.push(((codePoint >> 6) & 0x1F) | 0xC0);\r\n            } else {\r\n              if (codePoint < 0x10000) {\r\n                utf8.push(((codePoint >> 12) & 0x0F) | 0xE0);\r\n              } else {\r\n                utf8.push(\r\n                  ((codePoint >> 18) & 0x07) | 0xF0,\r\n                  ((codePoint >> 12) & 0x3F) | 0x80);\r\n              }\r\n              utf8.push(((codePoint >> 6) & 0x3F) | 0x80);\r\n            }\r\n            utf8.push((codePoint & 0x3F) | 0x80);\r\n          }\r\n        }\r\n      }\r\n  \r\n      this.addInt8(0);\r\n      this.startVector(1, utf8.length, 1);\r\n      this.bb.setPosition(this.space -= utf8.length);\r\n      for (let i = 0, offset = this.space, bytes = this.bb.bytes(); i < utf8.length; i++) {\r\n        bytes[offset++] = utf8[i];\r\n      }\r\n      return this.endVector();\r\n    }\r\n  \r\n    /**\r\n     * A helper function to avoid generated code depending on this file directly.\r\n     */\r\n    createLong(low: number, high: number): Long {\r\n      return Long.create(low, high);\r\n    }\r\n  \r\n    /**\r\n     * A helper function to pack an object\r\n     * \r\n     * @returns offset of obj\r\n     */\r\n    createObjectOffset(obj: string | IGeneratedObject): Offset {\r\n      if(obj === null) {\r\n        return 0\r\n      }\r\n  \r\n      if(typeof obj === 'string') {\r\n        return this.createString(obj);\r\n      } else {\r\n        return obj.pack(this);\r\n      }\r\n    }\r\n  \r\n    /**\r\n     * A helper function to pack a list of object\r\n     * \r\n     * @returns list of offsets of each non null object\r\n     */\r\n    createObjectOffsetList(list: string[]): Offset[] {\r\n      const ret = [];\r\n  \r\n      for(let i = 0; i < list.length; ++i) {\r\n        const val = list[i];\r\n  \r\n        if(val !== null) {\r\n          ret.push(this.createObjectOffset(val));\r\n        } else {\r\n          throw new Error(\r\n            'FlatBuffers: Argument for createObjectOffsetList cannot contain null.'); \r\n        }\r\n      }\r\n      \r\n      return ret;\r\n    }\r\n  \r\n    createStructOffsetList(list: string[], startFunc: (builder: Builder, length: number) => void): Offset {\r\n      startFunc(this, list.length);\r\n      this.createObjectOffsetList(list);\r\n      return this.endVector();\r\n    }\r\n  }"]}